{
  "address": "0x31737E2B695d4dA11eA0f37053e6ecb2d673A54d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "KeeperAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "KeeperRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "Merge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__NAME__",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfVePearl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "blacklistVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bribeTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caviarManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        }
      ],
      "name": "claimBribe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_fees",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        }
      ],
      "name": "claimFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cvrPearlGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastVote",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "weights",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct CaviarStrategy.VoteInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "increaseTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseTimeMax",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_pearl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vePearl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pearlVoter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pearlRewardsDistributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lockingYear",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAllowedVoter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isKeeper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isManual",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastBribe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manualFeeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "merge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pearl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pearlRewardsDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pearlVoter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setCaviarManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isManual",
          "type": "bool"
        }
      ],
      "name": "setIsManual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManualFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pearl",
          "type": "address"
        }
      ],
      "name": "setPearl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pearlRewardsDistributor",
          "type": "address"
        }
      ],
      "name": "setPearlRewardsDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pearlVoter",
          "type": "address"
        }
      ],
      "name": "setPearlVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vePearl",
          "type": "address"
        }
      ],
      "name": "setVEPearl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "setVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cvrPearlGauge",
          "type": "address"
        }
      ],
      "name": "setcvrPearlGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toSplit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "splitAndSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vePearl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pool",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "whitelistVoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x16ee8c7c3fb3f90b788ef7006134b817936185a550a3047779d0a98d88fc6c4d",
  "receipt": {
    "to": null,
    "from": "0x3d41487A3c5662eDE90D0eE8854f3cC59E8D66AD",
    "contractAddress": "0x31737E2B695d4dA11eA0f37053e6ecb2d673A54d",
    "transactionIndex": 90,
    "gasUsed": "3101822",
    "logsBloom": "0x
    "blockHash": "0x62cb19ab2410a078969ccaf50671cd9b73834136e0a6698f68064683e8e40e54",
    "transactionHash": "0x16ee8c7c3fb3f90b788ef7006134b817936185a550a3047779d0a98d88fc6c4d",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 47180112,
        "transactionHash": "0x16ee8c7c3fb3f90b788ef7006134b817936185a550a3047779d0a98d88fc6c4d",
        "address": "0x31737E2B695d4dA11eA0f37053e6ecb2d673A54d",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 310,
        "blockHash": "0x62cb19ab2410a078969ccaf50671cd9b73834136e0a6698f68064683e8e40e54"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 47180112,
        "transactionHash": "0x16ee8c7c3fb3f90b788ef7006134b817936185a550a3047779d0a98d88fc6c4d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003d41487a3c5662ede90d0ee8854f3cc59e8d66ad",
          "0x000000000000000000000000794e44d1334a56fea7f4df12633b88820d0c5888"
        ],
        "data": "0x000000000000000000000000000000000000000000000000016ffa48f21b372e000000000000000000000000000000000000000000000001597d39cb3ee648360000000000000000000000000000000000000000000001d726dbf153496cdbf6000000000000000000000000000000000000000000000001580d3f824ccb11080000000000000000000000000000000000000000000001d7284beb9c3b881324",
        "logIndex": 311,
        "blockHash": "0x62cb19ab2410a078969ccaf50671cd9b73834136e0a6698f68064683e8e40e54"
      }
    ],
    "blockNumber": 47180112,
    "cumulativeGasUsed": "12796112",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "2883ce366acf9a88bdfc3407cf2f38b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"KeeperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"KeeperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"Merge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__NAME__\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfVePearl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"blacklistVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bribeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caviarManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"}],\"name\":\"claimBribe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"}],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cvrPearlGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastVote\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CaviarStrategy.VoteInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"increaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseTimeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_pearl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vePearl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pearlVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pearlRewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockingYear\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowedVoter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isManual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBribe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pearl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pearlRewardsDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pearlVoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setCaviarManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isManual\",\"type\":\"bool\"}],\"name\":\"setIsManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManualFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pearl\",\"type\":\"address\"}],\"name\":\"setPearl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pearlRewardsDistributor\",\"type\":\"address\"}],\"name\":\"setPearlRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pearlVoter\",\"type\":\"address\"}],\"name\":\"setPearlVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vePearl\",\"type\":\"address\"}],\"name\":\"setVEPearl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"setVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cvrPearlGauge\",\"type\":\"address\"}],\"name\":\"setcvrPearlGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toSplit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"splitAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vePearl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pool\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"whitelistVoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CaviarStrategy.sol\":\"CaviarStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/CaviarStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IVePearl.sol\\\";\\nimport \\\"./interfaces/IVoter.sol\\\";\\nimport \\\"./interfaces/IPearlGauge.sol\\\";\\nimport \\\"./interfaces/IRewardsDistributor.sol\\\";\\nimport \\\"./interfaces/ICaviarManager.sol\\\";\\nimport \\\"./interfaces/IPearlBribes.sol\\\";\\n\\ncontract CaviarStrategy is OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    string public __NAME__;\\n    struct VoteInfo {\\n        address[] pairs;\\n        uint256[] weights;\\n    }\\n\\n    VoteInfo lastVote;\\n\\n    address public vePearl;\\n    address public pearl;\\n    address public caviarManager;\\n    address public pearlVoter;\\n    address public feeManager;\\n    address public pearlRewardsDistributor;\\n    address public cvrPearlGauge;\\n\\n    mapping(address => bool) isBoostStrategy;\\n    mapping(address => bool) public isAllowedVoter;\\n\\n    uint256 public tokenId;\\n    uint256 public MAX_TIME;\\n    uint256 public WEEK;\\n\\n    mapping(uint256 => uint256) public tokenIdAt;\\n    mapping(uint256 => VoteInfo) voteInfoAt;\\n    mapping(address => bool) public isKeeper;\\n    mapping(address => uint256) public lastBribe;\\n    address[] public bribeTokens;\\n\\n    address public manualFeeManager;\\n    bool public isManual;\\n\\n    event Merge(uint256 indexed from);\\n    event KeeperAdded(address indexed keeper);\\n    event KeeperRemoved(address indexed keeper);\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string memory _name,\\n        address _pearl,\\n        address _vePearl,\\n        address _pearlVoter,\\n        address _feeManager,\\n        address _pearlRewardsDistributor,\\n        uint _lockingYear // eg.: crv = 4, lqdr = 2\\n    ) public initializer {\\n        __Ownable_init();\\n        __NAME__ = _name;\\n\\n        pearl = _pearl;\\n        vePearl = _vePearl;\\n        require(_pearl == IVePearl(vePearl).token(), \\\"not same token\\\");\\n\\n        pearlVoter = _pearlVoter;\\n        feeManager = _feeManager;\\n        pearlRewardsDistributor = _pearlRewardsDistributor;\\n\\n        MAX_TIME = _lockingYear * 364 * 86400;\\n        WEEK = 7 * 86400;\\n    }\\n\\n    modifier restricted() {\\n        require(msg.sender == owner() || msg.sender == caviarManager, \\\"Auth failed\\\");\\n        _;\\n    }\\n\\n    modifier ownerOrAllowedVoter() {\\n        require(msg.sender == owner() || isAllowedVoter[msg.sender], \\\"Permission denied\\\");\\n        _;\\n    }\\n\\n    function getLastVote() external view returns (VoteInfo memory) {\\n        return lastVote;\\n    }\\n\\n    modifier keeper() {\\n        require(isKeeper[msg.sender] == true || msg.sender == owner(), \\\"not keeper\\\");\\n        _;\\n    }\\n\\n    /*\\n        -------------------\\n        Setters\\n        -------------------\\n    */\\n\\n    function setVoter(address _voter) external onlyOwner {\\n        require(_voter != address(0), \\\"addr 0\\\");\\n        pearlVoter = _voter;\\n    }\\n\\n    function setcvrPearlGauge(address _cvrPearlGauge) external onlyOwner {\\n        require(_cvrPearlGauge != address(0), \\\"addr 0\\\");\\n        cvrPearlGauge = _cvrPearlGauge;\\n    }\\n\\n    function setPearlRewardsDistributor(address _pearlRewardsDistributor) external onlyOwner {\\n        require(_pearlRewardsDistributor != address(0), \\\"addr 0\\\");\\n        pearlRewardsDistributor = _pearlRewardsDistributor;\\n    }\\n\\n    function setCaviarManager(address _manager) external onlyOwner {\\n        require(_manager != address(0), \\\"addr 0\\\");\\n        caviarManager = _manager;\\n    }\\n\\n    function setPearl(address _pearl) external onlyOwner {\\n        require(_pearl != address(0), \\\"addr 0\\\");\\n        pearl = _pearl;\\n    }\\n\\n    function setVEPearl(address _vePearl) external onlyOwner {\\n        require(_vePearl != address(0), \\\"addr 0\\\");\\n        vePearl = _vePearl;\\n    }\\n\\n    function setPearlVoter(address _pearlVoter) external onlyOwner {\\n        require(_pearlVoter != address(0), \\\"addr 0\\\");\\n        pearlVoter = _pearlVoter;\\n    }\\n\\n    function whitelistVoter(address _voter) external onlyOwner {\\n        isAllowedVoter[_voter] = true;\\n    }\\n\\n    function blacklistVoter(address _voter) external onlyOwner {\\n        isAllowedVoter[_voter] = false;\\n    }\\n\\n    function setManualFeeManager(address _manager) external onlyOwner {\\n        require(_manager != address(0), \\\"addr 0\\\");\\n        manualFeeManager = _manager;\\n    }\\n\\n    function setIsManual(bool _isManual) external onlyOwner {\\n        isManual = _isManual;\\n    }\\n\\n    function addKeeper(address _keeper) external onlyOwner {\\n        require(_keeper != address(0));\\n        require(isKeeper[_keeper] == false);\\n        isKeeper[_keeper] = true;\\n        emit KeeperAdded(_keeper);\\n    }\\n\\n    function removeKeeper(address _keeper) external onlyOwner {\\n        require(_keeper != address(0));\\n        require(isKeeper[_keeper] == true);\\n        isKeeper[_keeper] = false;\\n        emit KeeperRemoved(_keeper);\\n    }\\n\\n    /*  \\n        -------------------\\n        vePearl MANAGMENT\\n        -------------------\\n    */\\n\\n    function createLock(uint256 _amount, uint256 _unlockTime) external restricted {\\n        require(tokenId == 0, \\\"Already locked\\\");\\n        uint256 _balance = IERC20(pearl).balanceOf(address(this));\\n        require(_amount <= _balance, \\\"Amount exceeds balance\\\");\\n        IERC20(pearl).safeApprove(vePearl, 0);\\n        IERC20(pearl).safeApprove(vePearl, _amount);\\n        tokenId = IVePearl(vePearl).create_lock(_amount, _unlockTime);\\n    }\\n\\n    function release() external restricted {\\n        IVePearl(vePearl).withdraw(tokenId);\\n    }\\n\\n    function increaseAmount(uint256 _amount) external restricted {\\n        _increaseAmount(_amount);\\n    }\\n\\n    function _increaseAmount(uint256 _amount) internal {\\n        uint256 _balance = IERC20(pearl).balanceOf(address(this));\\n        require(_amount <= _balance, \\\"Amount exceeds pearl balance\\\");\\n        IERC20(pearl).safeApprove(vePearl, 0);\\n        IERC20(pearl).safeApprove(vePearl, _amount);\\n        IVePearl(vePearl).increase_amount(tokenId, _amount);\\n    }\\n\\n    function _increaseTime(uint256 _unlockTime) internal {\\n        IVePearl(vePearl).increase_unlock_time(tokenId, _unlockTime);\\n    }\\n\\n    function increaseTime(uint256 _unlockTime) external ownerOrAllowedVoter {\\n        _increaseTime(_unlockTime);\\n    }\\n\\n    function increaseTimeMax() external {\\n        _increaseTime(MAX_TIME);\\n    }\\n\\n    function balanceOfVePearl() public view returns (uint256) {\\n        (int128 amount, ) = IVePearl(vePearl).locked(tokenId);\\n        return uint256(uint128(amount));\\n    }\\n\\n    /*  \\n        -------------------\\n        VOTING AND CLAIMING\\n        -------------------\\n    */\\n\\n    function claimBribe(address[] memory _bribes, address[][] memory _tokens) external keeper {\\n        // clear previous bribe data:\\n        uint256 i = 0;\\n        for (; i < bribeTokens.length; ++i) {\\n            delete lastBribe[bribeTokens[i]];\\n        }\\n        delete bribeTokens;\\n\\n        // claim new vote:\\n        IVoter(pearlVoter).claimBribes(_bribes, _tokens, tokenId);\\n        i = 0;\\n        uint256 k = 0;\\n        uint256 _len1 = _bribes.length;\\n        uint256 _len2;\\n        uint256 _amount = 0;\\n        address _token;\\n        for (i; i < _len1; i++) {\\n            _len2 = _tokens[i].length;\\n            for (k = 0; k < _len2; k++) {\\n                _token = _tokens[i][k];\\n                _amount = IERC20(_token).balanceOf(address(this));\\n                if (_amount != 0) {\\n                    lastBribe[_token] = _amount;\\n                    bribeTokens.push(_token);\\n                    if (isManual && manualFeeManager != address(0)) {\\n                        IERC20(_token).safeTransfer(manualFeeManager, _amount);\\n                    } else {\\n                        IERC20(_token).safeTransfer(feeManager, _amount);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function claimFee(address[] memory _fees, address[][] memory _tokens) external keeper {\\n        IVoter(pearlVoter).claimFees(_fees, _tokens, tokenId);\\n        uint256 i = 0;\\n        uint256 k = 0;\\n        uint256 _len1 = _fees.length;\\n        uint256 _len2;\\n        uint256 _amount = 0;\\n        address _token;\\n        for (i; i < _len1; i++) {\\n            _len2 = _tokens[i].length;\\n            for (k = 0; k < _len2; k++) {\\n                _token = _tokens[i][k];\\n                _amount = IERC20(_token).balanceOf(address(this));\\n                if (_amount != 0) {\\n                    if (isManual && manualFeeManager != address(0)) {\\n                        IERC20(_token).safeTransfer(manualFeeManager, _amount);\\n                    } else {\\n                        IERC20(_token).safeTransfer(feeManager, _amount);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function claimRebase() external restricted {\\n        IRewardsDistributor(pearlRewardsDistributor).claim(tokenId);\\n        // _resetVote();\\n    }\\n\\n    function vote(address[] calldata _pool, uint256[] calldata _weights) external ownerOrAllowedVoter {\\n        _vote(_pool, _weights);\\n    }\\n\\n    function _vote(address[] memory _pool, uint256[] memory _weights) internal {\\n        require(_pool.length == _weights.length, \\\"Token length doesn't match\\\");\\n        uint256 _length = _pool.length;\\n        IVoter(pearlVoter).vote(tokenId, _pool, _weights);\\n\\n        VoteInfo memory _lastVote;\\n        _lastVote.pairs = new address[](_length);\\n        _lastVote.pairs = _pool;\\n\\n        _lastVote.weights = new uint[](_length);\\n        _lastVote.weights = _weights;\\n\\n        lastVote = _lastVote;\\n\\n        // ICaviarManager(caviarManager).disableRedeem();\\n\\n        tokenIdAt[ICaviarManager(caviarManager).getCurrentEpoch()] = tokenId;\\n        voteInfoAt[ICaviarManager(caviarManager).getCurrentEpoch()] = lastVote;\\n    }\\n\\n    function _pokeVote() internal {\\n        uint256 _currentEpoch = ICaviarManager(caviarManager).getCurrentEpoch();\\n        if (tokenIdAt[_currentEpoch] > 0) {\\n            _vote(voteInfoAt[_currentEpoch].pairs, voteInfoAt[_currentEpoch].weights);\\n        }\\n    }\\n\\n    function merge(uint256 from) external restricted {\\n        require(from != tokenId, \\\"Can't merge from main tokenId\\\");\\n        IVePearl(vePearl).merge(from, tokenId);\\n        emit Merge(from);\\n    }\\n\\n    function splitAndSend(uint256 _toSplit, address _to) external restricted {\\n        _resetVote();\\n        uint256 _totalBalance = balanceOfVePearl();\\n        uint256 _totalBalanceAfter = _totalBalance.sub(_toSplit);\\n        uint256[] memory _amounts = new uint[](2);\\n        _amounts[0] = _totalBalanceAfter;\\n        _amounts[1] = _toSplit;\\n\\n        IVePearl(vePearl).split(_amounts, tokenId);\\n        uint256 _splitTokenId = IVePearl(vePearl).tokenId();\\n\\n        IVePearl(vePearl).transferFrom(address(this), _to, _splitTokenId);\\n\\n        _pokeVote();\\n    }\\n\\n    function _resetVote() internal {\\n        IVoter(pearlVoter).reset(tokenId);\\n    }\\n\\n    function resetVote() external onlyOwner {\\n        _resetVote();\\n    }\\n}\\n\",\"keccak256\":\"0x8b77ee097604fbe11f95fa670fb4d40d3835f7d416f9068e982a64bea81f235d\",\"license\":\"MIT\"},\"contracts/interfaces/ICaviarManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ICaviarManager {\\n    function disableRedeem() external;\\n    function getCurrentEpoch() external view returns (uint256);\\n}\",\"keccak256\":\"0x46f797c447c190bc112e41051d4fb60e639c353129997f5062eae49070e7ca5c\",\"license\":\"MIT\"},\"contracts/interfaces/IPearlBribes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IPearlBribes {\\n  function rewardTokens() external view returns(address[] memory);\\n  function getReward(address[] memory tokens) external;\\n  function notifyRewardAmount(address _rewardsToken, uint256 reward) external;\\n}\",\"keccak256\":\"0x11b5484334602c997660fd8280f4e885e37508c0652305b4ec7244ded4ba0e96\",\"license\":\"MIT\"},\"contracts/interfaces/IPearlGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IPearlGauge {\\n  function rewards() external view returns(uint256 reward);\\n  function getReward() external;\\n  function earned(address account) external view returns (uint256 reward);\\n  function deposit(uint256 _amount) external;\\n  function withdraw(uint256 _amount) external;\\n  function balanceOf(address _account) external view returns (uint256);\\n}\",\"keccak256\":\"0xecd7a384b673282c8dd0b0aa1059344087b64b47b4d38f8282f4b20aa56db101\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IRewardsDistributor {\\n    function checkpoint_token() external;\\n    function voting_escrow() external view returns(address);\\n    function checkpoint_total_supply() external;\\n    function claimable(uint _tokenId) external view returns (uint);\\n    function claim(uint _tokenId) external ;\\n}\\n\",\"keccak256\":\"0x090092c75ed7f8e6b196fe6579ca90168b952c2c205d448be99ba5bd4a098449\",\"license\":\"MIT\"},\"contracts/interfaces/IVePearl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\ninterface IVePearl {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    // struct LockedBalance {\\n    //     int128 amount;\\n    //     uint end;\\n    // }\\n\\n    function create_lock_for(uint _value, uint _lock_duration, address _to) external returns (uint);\\n\\n    // function locked(uint id) external view returns(LockedBalance memory);\\n    function locked(uint id) external view returns(int128 amount, uint end);\\n    function tokenOfOwnerByIndex(address _owner, uint _tokenIndex) external view returns (uint);\\n\\n    function token() external view returns (address);\\n    function team() external view returns (address);\\n    function epoch() external view returns (uint);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function transferFrom(address, address, uint) external;\\n\\n    function voted(uint) external view returns (bool);\\n    function attachments(uint) external view returns (uint);\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n\\n    function balanceOfNFT(uint _id) external view returns (uint);\\n    function balanceOf(address _owner) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function supply() external view returns (uint);\\n\\n\\n    function decimals() external view returns(uint8);\\n\\n    function create_lock(uint _value, uint _lock_duration) external returns(uint);\\n    function withdraw(uint _tokenId) external;\\n    function increase_amount(uint _tokenId, uint _value) external;\\n    function increase_unlock_time(uint _tokenId, uint _lock_duration) external;\\n    function merge(uint _from, uint _to) external;\\n    function split(uint[] memory amounts, uint _tokenId) external;\\n    function approve(address _approved, uint _tokenId) external;\\n\\n    function tokenId() external view returns (uint256);\\n}\",\"keccak256\":\"0x0f89fc95588439b484d51e9ac15c60de238956279a802d69cf93b13e74ac9548\",\"license\":\"MIT\"},\"contracts/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\ninterface IVoter {\\n\\n    function claimFees(address[] memory _fees, address[][] memory _tokens, uint _tokenId) external;\\n    function claimBribes(address[] memory _bribes, address[][] memory _tokens, uint _tokenId) external;\\n    function vote(uint tokenId, address[] calldata _poolVote, uint256[] calldata _weights) external;\\n    function reset(uint _tokenId) external;\\n}\\n\",\"keccak256\":\"0x1d9519906186fe6070e204be9944412abcb5a6ebe09a6d4f36a52ecfb38f3725\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6136d480620000f36000396000f3fe608060405234801561001057600080fd5b506004361061032b5760003560e01c806376660223116101b2578063d0fb0203116100f9578063eca5f158116100a2578063f2fde38b1161007c578063f2fde38b14610698578063f4359ce5146106ab578063f5ae2240146106b4578063fdd929f3146106c757600080fd5b8063eca5f15814610667578063f1819bb51461066f578063f2e83ddf1461068457600080fd5b8063de7731fe116100d3578063de7731fe14610621578063e4880ea614610641578063ea8a74641461065457600080fd5b8063d0fb0203146105fb578063d16c2e9914610444578063dc19c4d81461060e57600080fd5b8063b52c05fe1161015b578063bddf1ce911610135578063bddf1ce9146105c2578063bdf44a28146105d5578063bf8c39b1146105e857600080fd5b8063b52c05fe14610589578063b5913b7c1461059c578063b8a088ab146105af57600080fd5b806395bef2121161018c57806395bef2121461055b578063b24cab731461056e578063b4cd143a1461058157600080fd5b8063766602231461052257806386d1a69f146105425780638da5cb5b1461054a57600080fd5b80634bc2a6571161027657806369fc48911161021f5780637001cbe1116101f95780637001cbe1146104f4578063715018a61461050757806375dee9981461050f57600080fd5b806369fc4891146104ab5780636ba42aaa146104be5780636f816a20146104e157600080fd5b806367244d371161025057806367244d371461047d57806367c2e9c81461049057806369af495b1461049857600080fd5b80634bc2a657146104445780635bb311be1461045757806366123fe51461046a57600080fd5b806326949984116102d85780633780dd15116102b25780633780dd15146104095780633c9a2a1a1461041e5780634032b72b1461043157600080fd5b806326949984146103e55780633220edac146103ee578063329a8cfa1461040157600080fd5b806317d70f7c1161030957806317d70f7c146103905780631c30c15e146103a757806324a47aeb146103d257600080fd5b80630f915eee1461033057806314ae9f2e1461036857806315456eba1461037d575b600080fd5b61035361033e366004612e39565b60706020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61037b610376366004612e39565b6106da565b005b61037b61038b366004612e5d565b610768565b61039960715481565b60405190815260200161035f565b606e546103ba906001600160a01b031681565b6040516001600160a01b03909116815260200161035f565b61037b6103e0366004612e5d565b6107d6565b61039960725481565b606d546103ba906001600160a01b031681565b61037b610934565b610411610946565b60405161035f9190612eba565b61037b61042c366004612e5d565b610a1d565b61037b61043f366004612e39565b610a9a565b61037b610452366004612e39565b610b27565b61037b610465366004612e39565b610b90565b61037b610478366004612f22565b610bf9565b6068546103ba906001600160a01b031681565b61037b610e6a565b61037b6104a6366004612e39565b610e75565b606a546103ba906001600160a01b031681565b6103536104cc366004612e39565b60766020526000908152604090205460ff1681565b61037b6104ef366004612f9e565b610ede565b61037b610502366004612e39565b610fc5565b61037b61102e565b61037b61051d366004612e39565b611040565b610399610530366004612e39565b60776020526000908152604090205481565b61037b611069565b6033546001600160a01b03166103ba565b61037b6105693660046130de565b611142565b6079546103ba906001600160a01b031681565b61037b611471565b61037b6105973660046131b3565b61151c565b61037b6105aa366004612e39565b61175a565b61037b6105bd366004612e39565b6117c3565b61037b6105d0366004612e39565b61182c565b61037b6105e33660046131e3565b611858565b61037b6105f63660046130de565b611899565b606c546103ba906001600160a01b031681565b6069546103ba906001600160a01b031681565b61039961062f366004612e5d565b60746020526000908152604090205481565b61037b61064f366004613200565b611afd565b61037b610662366004612e39565b611d96565b610399611dff565b610677611eab565b60405161035f9190613316565b60795461035390600160a01b900460ff1681565b61037b6106a6366004612e39565b611f39565b61039960735481565b6103ba6106c2366004612e5d565b611fc6565b606b546103ba906001600160a01b031681565b6106e2611ff0565b6001600160a01b0381166106f557600080fd5b6001600160a01b03811660009081526076602052604090205460ff16151560011461071f57600080fd5b6001600160a01b038116600081815260766020526040808220805460ff19169055517fa7a775c2c8141f7985c111748ec31c11e5e44b83528e105c8d1d4e8e6b81cf809190a250565b6033546001600160a01b031633148061078b5750606a546001600160a01b031633145b6107ca5760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064015b60405180910390fd5b6107d38161204a565b50565b6033546001600160a01b03163314806107f95750606a546001600160a01b031633145b6108335760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064016107c1565b60715481036108845760405162461bcd60e51b815260206004820152601d60248201527f43616e2774206d657267652066726f6d206d61696e20746f6b656e496400000060448201526064016107c1565b6068546071546040517fd1c2babb0000000000000000000000000000000000000000000000000000000081526004810184905260248101919091526001600160a01b039091169063d1c2babb90604401600060405180830381600087803b1580156108ee57600080fd5b505af1158015610902573d6000803e3d6000fd5b50506040518392507f1a472ddc5e9a11d4d8cafdac71f6e9001c1122dd0b08bd46a12c01465ed217349150600090a250565b61093c611ff0565b6109446121c7565b565b60408051808201909152606080825260208201526040805160668054606060208202840181018552938301818152929391928492909184918401828280156109b757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610999575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0f57602002820191906000526020600020905b8154815260200190600101908083116109fb575b505050505081525050905090565b6033546001600160a01b0316331480610a4557503360009081526070602052604090205460ff165b610a915760405162461bcd60e51b815260206004820152601160248201527f5065726d697373696f6e2064656e69656400000000000000000000000000000060448201526064016107c1565b6107d381612215565b610aa2611ff0565b6001600160a01b038116610ab557600080fd5b6001600160a01b03811660009081526076602052604090205460ff1615610adb57600080fd5b6001600160a01b038116600081815260766020526040808220805460ff19166001179055517f1584773458d98c71b34a270ee1100b3a42889bf91e3b7a858563b684c24d838e9190a250565b610b2f611ff0565b6001600160a01b038116610b6e5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b610b98611ff0565b6001600160a01b038116610bd75760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606e80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331480610c1c5750606a546001600160a01b031633145b610c565760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064016107c1565b610c5e6121c7565b6000610c68611dff565b90506000610c76828561229f565b60408051600280825260608201835292935060009290916020830190803683370190505090508181600081518110610cb057610cb0613349565b6020026020010181815250508481600181518110610cd057610cd0613349565b60209081029190910101526068546071546040517f56afe7440000000000000000000000000000000000000000000000000000000081526001600160a01b03909216916356afe74491610d289185919060040161338f565b600060405180830381600087803b158015610d4257600080fd5b505af1158015610d56573d6000803e3d6000fd5b505050506000606860009054906101000a90046001600160a01b03166001600160a01b03166317d70f7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd391906133b1565b6068546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038881166024830152604482018490529293509116906323b872dd90606401600060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b50505050610e626122b4565b505050505050565b610944607254612215565b610e7d611ff0565b6001600160a01b038116610ebc5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331480610f0657503360009081526070602052604090205460ff165b610f525760405162461bcd60e51b815260206004820152601160248201527f5065726d697373696f6e2064656e69656400000000000000000000000000000060448201526064016107c1565b610fbf8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061241692505050565b50505050565b610fcd611ff0565b6001600160a01b03811661100c5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b611036611ff0565b6109446000612719565b611048611ff0565b6001600160a01b03166000908152607060205260409020805460ff19169055565b6033546001600160a01b031633148061108c5750606a546001600160a01b031633145b6110c65760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064016107c1565b6068546071546040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691632e1a7d4d916111149160040190815260200190565b600060405180830381600087803b15801561112e57600080fd5b505af1158015610fbf573d6000803e3d6000fd5b3360009081526076602052604090205460ff1615156001148061116f57506033546001600160a01b031633145b6111bb5760405162461bcd60e51b815260206004820152600a60248201527f6e6f74206b65657065720000000000000000000000000000000000000000000060448201526064016107c1565b60005b6078548110156112145760776000607883815481106111df576111df613349565b60009182526020808320909101546001600160a01b0316835282019290925260400181205561120d816133e0565b90506111be565b61122060786000612d01565b606b546071546040517f7715ee750000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691637715ee759161126e91879187916004016133fa565b600060405180830381600087803b15801561128857600080fd5b505af115801561129c573d6000803e3d6000fd5b505084516000935083925090508180805b83861015611467578686815181106112c7576112c7613349565b6020026020010151519250600094505b82851015611455578686815181106112f1576112f1613349565b6020026020010151858151811061130a5761130a613349565b60209081029190910101516040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561135c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138091906133b1565b91508115611443576001600160a01b03811660008181526077602052604081208490556078805460018101825591527f8dc6fb69531d98d70dc0420e638d2dfd04e09e1ec783ede9aac77da9c5a0dac40180546001600160a01b0319169091179055607954600160a01b900460ff16801561140557506079546001600160a01b031615155b1561142957607954611424906001600160a01b0383811691168461276b565b611443565b606c54611443906001600160a01b0383811691168461276b565b8461144d816133e0565b9550506112d7565b8561145f816133e0565b9650506112ad565b5050505050505050565b6033546001600160a01b03163314806114945750606a546001600160a01b031633145b6114ce5760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064016107c1565b606d546071546040517f379607f50000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163379607f5916111149160040190815260200190565b6033546001600160a01b031633148061153f5750606a546001600160a01b031633145b6115795760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064016107c1565b607154156115c95760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479206c6f636b656400000000000000000000000000000000000060448201526064016107c1565b6069546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611612573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163691906133b1565b9050808311156116885760405162461bcd60e51b815260206004820152601660248201527f416d6f756e7420657863656564732062616c616e63650000000000000000000060448201526064016107c1565b6068546069546116a6916001600160a01b0391821691166000612819565b6068546069546116c3916001600160a01b03918216911685612819565b6068546040517f65fc387300000000000000000000000000000000000000000000000000000000815260048101859052602481018490526001600160a01b03909116906365fc3873906044016020604051808303816000875af115801561172e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175291906133b1565b607155505050565b611762611ff0565b6001600160a01b0381166117a15760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b6117cb611ff0565b6001600160a01b03811661180a5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b611834611ff0565b6001600160a01b03166000908152607060205260409020805460ff19166001179055565b611860611ff0565b60798054911515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b3360009081526076602052604090205460ff161515600114806118c657506033546001600160a01b031633145b6119125760405162461bcd60e51b815260206004820152600a60248201527f6e6f74206b65657065720000000000000000000000000000000000000000000060448201526064016107c1565b606b546071546040517f666256aa0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163666256aa9161196091869186916004016133fa565b600060405180830381600087803b15801561197a57600080fd5b505af115801561198e573d6000803e3d6000fd5b50508351600092508291508180805b83861015611467578686815181106119b7576119b7613349565b6020026020010151519250600094505b82851015611aeb578686815181106119e1576119e1613349565b602002602001015185815181106119fa576119fa613349565b60209081029190910101516040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7091906133b1565b91508115611ad957607954600160a01b900460ff168015611a9b57506079546001600160a01b031615155b15611abf57607954611aba906001600160a01b0383811691168461276b565b611ad9565b606c54611ad9906001600160a01b0383811691168461276b565b84611ae3816133e0565b9550506119c7565b85611af5816133e0565b96505061199d565b600054610100900460ff1615808015611b1d5750600054600160ff909116105b80611b375750303b158015611b37575060005460ff166001145b611ba95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107c1565b6000805460ff191660011790558015611bcc576000805461ff0019166101001790555b611bd4612967565b6065611be089826134f5565b50606980546001600160a01b03808a166001600160a01b031992831617909255606880549289169290911682179055604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a916004808201926020929091908290030181865afa158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8791906135b5565b6001600160a01b0316876001600160a01b031614611ce75760405162461bcd60e51b815260206004820152600e60248201527f6e6f742073616d6520746f6b656e00000000000000000000000000000000000060448201526064016107c1565b606b80546001600160a01b038088166001600160a01b031992831617909255606c8054878416908316179055606d805492861692909116919091179055611d308261016c6135d2565b611d3d90620151806135d2565b60725562093a806073558015611467576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050505050565b611d9e611ff0565b6001600160a01b038116611ddd5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b607980546001600160a01b0319166001600160a01b0392909216919091179055565b6068546071546040517fb45a3c0e00000000000000000000000000000000000000000000000000000000815260009283926001600160a01b039091169163b45a3c0e91611e529160040190815260200190565b6040805180830381865afa158015611e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9291906135e9565b506fffffffffffffffffffffffffffffffff1692915050565b60658054611eb890613475565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee490613475565b8015611f315780601f10611f0657610100808354040283529160200191611f31565b820191906000526020600020905b815481529060010190602001808311611f1457829003601f168201915b505050505081565b611f41611ff0565b6001600160a01b038116611fbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107c1565b6107d381612719565b60788181548110611fd657600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146109445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c1565b6069546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b791906133b1565b9050808211156121095760405162461bcd60e51b815260206004820152601c60248201527f416d6f756e74206578636565647320706561726c2062616c616e63650000000060448201526064016107c1565b606854606954612127916001600160a01b0391821691166000612819565b606854606954612144916001600160a01b03918216911684612819565b6068546071546040517fa183af520000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163a183af5291612199918690600401918252602082015260400190565b600060405180830381600087803b1580156121b357600080fd5b505af1158015610e62573d6000803e3d6000fd5b606b546071546040517f310bd74b0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163310bd74b916111149160040190815260200190565b6068546071546040517fa4d855df0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163a4d855df9161226a918590600401918252602082015260400190565b600060405180830381600087803b15801561228457600080fd5b505af1158015612298573d6000803e3d6000fd5b5050505050565b60006122ab828461361d565b90505b92915050565b606a54604080517fb97dd9e200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163b97dd9e29160048083019260209291908290030181865afa158015612317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233b91906133b1565b600081815260746020526040902054909150156107d35760008181526075602090815260409182902080548351818402810184019094528084526107d393928301828280156123b357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612395575b5050506000858152607560209081526040918290206001018054835181840281018401909452808452929450925083018282801561241057602002820191906000526020600020905b8154815260200190600101908083116123fc575b50505050505b80518251146124675760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e206c656e67746820646f65736e2774206d6174636800000000000060448201526064016107c1565b8151606b546071546040517f7ac09bf70000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691637ac09bf7916124b79187908790600401613630565b600060405180830381600087803b1580156124d157600080fd5b505af11580156124e5573d6000803e3d6000fd5b50505050612506604051806040016040528060608152602001606081525090565b8167ffffffffffffffff81111561251f5761251f61300a565b604051908082528060200260200182016040528015612548578160200160208202803683370190505b50508381528167ffffffffffffffff8111156125665761256661300a565b60405190808252806020026020018201604052801561258f578160200160208202803683370190505b505060208082018490528151805183926066926125b29284929190910190612d1f565b5060208281015180516125cb9260018501920190612d84565b5090505060715460746000606a60009054906101000a90046001600160a01b03166001600160a01b031663b97dd9e26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264d91906133b1565b815260200190815260200160002081905550606660756000606a60009054906101000a90046001600160a01b03166001600160a01b031663b97dd9e26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dc91906133b1565b8152602081019190915260400160002081546126fb9082908490612dbf565b50600182810180546127109284019190612dbf565b50505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0383166024820152604481018290526128149084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526129ec565b505050565b8015806128ac57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128aa91906133b1565b155b61291e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016107c1565b6040516001600160a01b0383166024820152604481018290526128149084907f095ea7b300000000000000000000000000000000000000000000000000000000906064016127b0565b600054610100900460ff166129e45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c1565b610944612ad4565b6000612a41826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b5a9092919063ffffffff16565b9050805160001480612a62575080806020019051810190612a629190613665565b6128145760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107c1565b600054610100900460ff16612b515760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c1565b61094433612719565b6060612b698484600085612b71565b949350505050565b606082471015612be95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107c1565b600080866001600160a01b03168587604051612c059190613682565b60006040518083038185875af1925050503d8060008114612c42576040519150601f19603f3d011682016040523d82523d6000602084013e612c47565b606091505b5091509150612c5887838387612c63565b979650505050505050565b60608315612cd2578251600003612ccb576001600160a01b0385163b612ccb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c1565b5081612b69565b612b698383815115612ce75781518083602001fd5b8060405162461bcd60e51b81526004016107c19190613316565b50805460008255906000526020600020908101906107d39190612dff565b828054828255906000526020600020908101928215612d74579160200282015b82811115612d7457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612d3f565b50612d80929150612dff565b5090565b828054828255906000526020600020908101928215612d74579160200282015b82811115612d74578251825591602001919060010190612da4565b828054828255906000526020600020908101928215612d745760005260206000209182015b82811115612d74578254825591600101919060010190612de4565b5b80821115612d805760008155600101612e00565b6001600160a01b03811681146107d357600080fd5b8035612e3481612e14565b919050565b600060208284031215612e4b57600080fd5b8135612e5681612e14565b9392505050565b600060208284031215612e6f57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015612eaf5781516001600160a01b031687529582019590820190600101612e8a565b509495945050505050565b600060208083528351604082850152612ed66060850182612e76565b85830151858203601f19016040870152805180835290840192506000918401905b80831015612f175783518252928401926001929092019190840190612ef7565b509695505050505050565b60008060408385031215612f3557600080fd5b823591506020830135612f4781612e14565b809150509250929050565b60008083601f840112612f6457600080fd5b50813567ffffffffffffffff811115612f7c57600080fd5b6020830191508360208260051b8501011115612f9757600080fd5b9250929050565b60008060008060408587031215612fb457600080fd5b843567ffffffffffffffff80821115612fcc57600080fd5b612fd888838901612f52565b90965094506020870135915080821115612ff157600080fd5b50612ffe87828801612f52565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156130495761304961300a565b604052919050565b600067ffffffffffffffff82111561306b5761306b61300a565b5060051b60200190565b600082601f83011261308657600080fd5b8135602061309b61309683613051565b613020565b82815260059290921b840181019181810190868411156130ba57600080fd5b8286015b84811015612f175780356130d181612e14565b83529183019183016130be565b600080604083850312156130f157600080fd5b823567ffffffffffffffff8082111561310957600080fd5b61311586838701613075565b935060209150818501358181111561312c57600080fd5b8501601f8101871361313d57600080fd5b803561314b61309682613051565b81815260059190911b8201840190848101908983111561316a57600080fd5b8584015b838110156131a2578035868111156131865760008081fd5b6131948c8983890101613075565b84525091860191860161316e565b508096505050505050509250929050565b600080604083850312156131c657600080fd5b50508035926020909101359150565b80151581146107d357600080fd5b6000602082840312156131f557600080fd5b8135612e56816131d5565b600080600080600080600060e0888a03121561321b57600080fd5b873567ffffffffffffffff8082111561323357600080fd5b818a0191508a601f83011261324757600080fd5b813560208282111561325b5761325b61300a565b61326d81601f19601f85011601613020565b92508183528c8183860101111561328357600080fd5b81818501828501376000818385010152829a506132a1818d01612e29565b9950505050506132b360408901612e29565b94506132c160608901612e29565b93506132cf60808901612e29565b92506132dd60a08901612e29565b915060c0880135905092959891949750929550565b60005b8381101561330d5781810151838201526020016132f5565b50506000910152565b60208152600082518060208401526133358160408501602087016132f2565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015612eaf57815187529582019590820190600101613373565b6040815260006133a2604083018561335f565b90508260208301529392505050565b6000602082840312156133c357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060001982036133f3576133f36133ca565b5060010190565b60608152600061340d6060830186612e76565b6020838203818501528186518084528284019150828160051b85010183890160005b8381101561345d57601f1987840301855261344b838351612e76565b9486019492509085019060010161342f565b50508095505050505050826040830152949350505050565b600181811c9082168061348957607f821691505b6020821081036134a957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561281457600081815260208120601f850160051c810160208610156134d65750805b601f850160051c820191505b81811015610e62578281556001016134e2565b815167ffffffffffffffff81111561350f5761350f61300a565b6135238161351d8454613475565b846134af565b602080601f83116001811461355857600084156135405750858301515b600019600386901b1c1916600185901b178555610e62565b600085815260208120601f198616915b8281101561358757888601518255948401946001909101908401613568565b50858210156135a55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156135c757600080fd5b8151612e5681612e14565b80820281158282048414176122ae576122ae6133ca565b600080604083850312156135fc57600080fd5b825180600f0b811461360d57600080fd5b6020939093015192949293505050565b818103818111156122ae576122ae6133ca565b8381526060602082015260006136496060830185612e76565b828103604084015261365b818561335f565b9695505050505050565b60006020828403121561367757600080fd5b8151612e56816131d5565b600082516136948184602087016132f2565b919091019291505056fea264697066735822122002ae17cb4dc09dfe8f82c63605854686d6377de817e1c4dcd7eb71d207a78bfb64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061032b5760003560e01c806376660223116101b2578063d0fb0203116100f9578063eca5f158116100a2578063f2fde38b1161007c578063f2fde38b14610698578063f4359ce5146106ab578063f5ae2240146106b4578063fdd929f3146106c757600080fd5b8063eca5f15814610667578063f1819bb51461066f578063f2e83ddf1461068457600080fd5b8063de7731fe116100d3578063de7731fe14610621578063e4880ea614610641578063ea8a74641461065457600080fd5b8063d0fb0203146105fb578063d16c2e9914610444578063dc19c4d81461060e57600080fd5b8063b52c05fe1161015b578063bddf1ce911610135578063bddf1ce9146105c2578063bdf44a28146105d5578063bf8c39b1146105e857600080fd5b8063b52c05fe14610589578063b5913b7c1461059c578063b8a088ab146105af57600080fd5b806395bef2121161018c57806395bef2121461055b578063b24cab731461056e578063b4cd143a1461058157600080fd5b8063766602231461052257806386d1a69f146105425780638da5cb5b1461054a57600080fd5b80634bc2a6571161027657806369fc48911161021f5780637001cbe1116101f95780637001cbe1146104f4578063715018a61461050757806375dee9981461050f57600080fd5b806369fc4891146104ab5780636ba42aaa146104be5780636f816a20146104e157600080fd5b806367244d371161025057806367244d371461047d57806367c2e9c81461049057806369af495b1461049857600080fd5b80634bc2a657146104445780635bb311be1461045757806366123fe51461046a57600080fd5b806326949984116102d85780633780dd15116102b25780633780dd15146104095780633c9a2a1a1461041e5780634032b72b1461043157600080fd5b806326949984146103e55780633220edac146103ee578063329a8cfa1461040157600080fd5b806317d70f7c1161030957806317d70f7c146103905780631c30c15e146103a757806324a47aeb146103d257600080fd5b80630f915eee1461033057806314ae9f2e1461036857806315456eba1461037d575b600080fd5b61035361033e366004612e39565b60706020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61037b610376366004612e39565b6106da565b005b61037b61038b366004612e5d565b610768565b61039960715481565b60405190815260200161035f565b606e546103ba906001600160a01b031681565b6040516001600160a01b03909116815260200161035f565b61037b6103e0366004612e5d565b6107d6565b61039960725481565b606d546103ba906001600160a01b031681565b61037b610934565b610411610946565b60405161035f9190612eba565b61037b61042c366004612e5d565b610a1d565b61037b61043f366004612e39565b610a9a565b61037b610452366004612e39565b610b27565b61037b610465366004612e39565b610b90565b61037b610478366004612f22565b610bf9565b6068546103ba906001600160a01b031681565b61037b610e6a565b61037b6104a6366004612e39565b610e75565b606a546103ba906001600160a01b031681565b6103536104cc366004612e39565b60766020526000908152604090205460ff1681565b61037b6104ef366004612f9e565b610ede565b61037b610502366004612e39565b610fc5565b61037b61102e565b61037b61051d366004612e39565b611040565b610399610530366004612e39565b60776020526000908152604090205481565b61037b611069565b6033546001600160a01b03166103ba565b61037b6105693660046130de565b611142565b6079546103ba906001600160a01b031681565b61037b611471565b61037b6105973660046131b3565b61151c565b61037b6105aa366004612e39565b61175a565b61037b6105bd366004612e39565b6117c3565b61037b6105d0366004612e39565b61182c565b61037b6105e33660046131e3565b611858565b61037b6105f63660046130de565b611899565b606c546103ba906001600160a01b031681565b6069546103ba906001600160a01b031681565b61039961062f366004612e5d565b60746020526000908152604090205481565b61037b61064f366004613200565b611afd565b61037b610662366004612e39565b611d96565b610399611dff565b610677611eab565b60405161035f9190613316565b60795461035390600160a01b900460ff1681565b61037b6106a6366004612e39565b611f39565b61039960735481565b6103ba6106c2366004612e5d565b611fc6565b606b546103ba906001600160a01b031681565b6106e2611ff0565b6001600160a01b0381166106f557600080fd5b6001600160a01b03811660009081526076602052604090205460ff16151560011461071f57600080fd5b6001600160a01b038116600081815260766020526040808220805460ff19169055517fa7a775c2c8141f7985c111748ec31c11e5e44b83528e105c8d1d4e8e6b81cf809190a250565b6033546001600160a01b031633148061078b5750606a546001600160a01b031633145b6107ca5760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064015b60405180910390fd5b6107d38161204a565b50565b6033546001600160a01b03163314806107f95750606a546001600160a01b031633145b6108335760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064016107c1565b60715481036108845760405162461bcd60e51b815260206004820152601d60248201527f43616e2774206d657267652066726f6d206d61696e20746f6b656e496400000060448201526064016107c1565b6068546071546040517fd1c2babb0000000000000000000000000000000000000000000000000000000081526004810184905260248101919091526001600160a01b039091169063d1c2babb90604401600060405180830381600087803b1580156108ee57600080fd5b505af1158015610902573d6000803e3d6000fd5b50506040518392507f1a472ddc5e9a11d4d8cafdac71f6e9001c1122dd0b08bd46a12c01465ed217349150600090a250565b61093c611ff0565b6109446121c7565b565b60408051808201909152606080825260208201526040805160668054606060208202840181018552938301818152929391928492909184918401828280156109b757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610999575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610a0f57602002820191906000526020600020905b8154815260200190600101908083116109fb575b505050505081525050905090565b6033546001600160a01b0316331480610a4557503360009081526070602052604090205460ff165b610a915760405162461bcd60e51b815260206004820152601160248201527f5065726d697373696f6e2064656e69656400000000000000000000000000000060448201526064016107c1565b6107d381612215565b610aa2611ff0565b6001600160a01b038116610ab557600080fd5b6001600160a01b03811660009081526076602052604090205460ff1615610adb57600080fd5b6001600160a01b038116600081815260766020526040808220805460ff19166001179055517f1584773458d98c71b34a270ee1100b3a42889bf91e3b7a858563b684c24d838e9190a250565b610b2f611ff0565b6001600160a01b038116610b6e5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606b80546001600160a01b0319166001600160a01b0392909216919091179055565b610b98611ff0565b6001600160a01b038116610bd75760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606e80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331480610c1c5750606a546001600160a01b031633145b610c565760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064016107c1565b610c5e6121c7565b6000610c68611dff565b90506000610c76828561229f565b60408051600280825260608201835292935060009290916020830190803683370190505090508181600081518110610cb057610cb0613349565b6020026020010181815250508481600181518110610cd057610cd0613349565b60209081029190910101526068546071546040517f56afe7440000000000000000000000000000000000000000000000000000000081526001600160a01b03909216916356afe74491610d289185919060040161338f565b600060405180830381600087803b158015610d4257600080fd5b505af1158015610d56573d6000803e3d6000fd5b505050506000606860009054906101000a90046001600160a01b03166001600160a01b03166317d70f7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610daf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd391906133b1565b6068546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038881166024830152604482018490529293509116906323b872dd90606401600060405180830381600087803b158015610e4257600080fd5b505af1158015610e56573d6000803e3d6000fd5b50505050610e626122b4565b505050505050565b610944607254612215565b610e7d611ff0565b6001600160a01b038116610ebc5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606980546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b0316331480610f0657503360009081526070602052604090205460ff165b610f525760405162461bcd60e51b815260206004820152601160248201527f5065726d697373696f6e2064656e69656400000000000000000000000000000060448201526064016107c1565b610fbf8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061241692505050565b50505050565b610fcd611ff0565b6001600160a01b03811661100c5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b611036611ff0565b6109446000612719565b611048611ff0565b6001600160a01b03166000908152607060205260409020805460ff19169055565b6033546001600160a01b031633148061108c5750606a546001600160a01b031633145b6110c65760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064016107c1565b6068546071546040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691632e1a7d4d916111149160040190815260200190565b600060405180830381600087803b15801561112e57600080fd5b505af1158015610fbf573d6000803e3d6000fd5b3360009081526076602052604090205460ff1615156001148061116f57506033546001600160a01b031633145b6111bb5760405162461bcd60e51b815260206004820152600a60248201527f6e6f74206b65657065720000000000000000000000000000000000000000000060448201526064016107c1565b60005b6078548110156112145760776000607883815481106111df576111df613349565b60009182526020808320909101546001600160a01b0316835282019290925260400181205561120d816133e0565b90506111be565b61122060786000612d01565b606b546071546040517f7715ee750000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691637715ee759161126e91879187916004016133fa565b600060405180830381600087803b15801561128857600080fd5b505af115801561129c573d6000803e3d6000fd5b505084516000935083925090508180805b83861015611467578686815181106112c7576112c7613349565b6020026020010151519250600094505b82851015611455578686815181106112f1576112f1613349565b6020026020010151858151811061130a5761130a613349565b60209081029190910101516040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561135c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138091906133b1565b91508115611443576001600160a01b03811660008181526077602052604081208490556078805460018101825591527f8dc6fb69531d98d70dc0420e638d2dfd04e09e1ec783ede9aac77da9c5a0dac40180546001600160a01b0319169091179055607954600160a01b900460ff16801561140557506079546001600160a01b031615155b1561142957607954611424906001600160a01b0383811691168461276b565b611443565b606c54611443906001600160a01b0383811691168461276b565b8461144d816133e0565b9550506112d7565b8561145f816133e0565b9650506112ad565b5050505050505050565b6033546001600160a01b03163314806114945750606a546001600160a01b031633145b6114ce5760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064016107c1565b606d546071546040517f379607f50000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163379607f5916111149160040190815260200190565b6033546001600160a01b031633148061153f5750606a546001600160a01b031633145b6115795760405162461bcd60e51b815260206004820152600b60248201526a105d5d1a0819985a5b195960aa1b60448201526064016107c1565b607154156115c95760405162461bcd60e51b815260206004820152600e60248201527f416c7265616479206c6f636b656400000000000000000000000000000000000060448201526064016107c1565b6069546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611612573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163691906133b1565b9050808311156116885760405162461bcd60e51b815260206004820152601660248201527f416d6f756e7420657863656564732062616c616e63650000000000000000000060448201526064016107c1565b6068546069546116a6916001600160a01b0391821691166000612819565b6068546069546116c3916001600160a01b03918216911685612819565b6068546040517f65fc387300000000000000000000000000000000000000000000000000000000815260048101859052602481018490526001600160a01b03909116906365fc3873906044016020604051808303816000875af115801561172e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175291906133b1565b607155505050565b611762611ff0565b6001600160a01b0381166117a15760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606d80546001600160a01b0319166001600160a01b0392909216919091179055565b6117cb611ff0565b6001600160a01b03811661180a5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b611834611ff0565b6001600160a01b03166000908152607060205260409020805460ff19166001179055565b611860611ff0565b60798054911515600160a01b027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff909216919091179055565b3360009081526076602052604090205460ff161515600114806118c657506033546001600160a01b031633145b6119125760405162461bcd60e51b815260206004820152600a60248201527f6e6f74206b65657065720000000000000000000000000000000000000000000060448201526064016107c1565b606b546071546040517f666256aa0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163666256aa9161196091869186916004016133fa565b600060405180830381600087803b15801561197a57600080fd5b505af115801561198e573d6000803e3d6000fd5b50508351600092508291508180805b83861015611467578686815181106119b7576119b7613349565b6020026020010151519250600094505b82851015611aeb578686815181106119e1576119e1613349565b602002602001015185815181106119fa576119fa613349565b60209081029190910101516040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7091906133b1565b91508115611ad957607954600160a01b900460ff168015611a9b57506079546001600160a01b031615155b15611abf57607954611aba906001600160a01b0383811691168461276b565b611ad9565b606c54611ad9906001600160a01b0383811691168461276b565b84611ae3816133e0565b9550506119c7565b85611af5816133e0565b96505061199d565b600054610100900460ff1615808015611b1d5750600054600160ff909116105b80611b375750303b158015611b37575060005460ff166001145b611ba95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107c1565b6000805460ff191660011790558015611bcc576000805461ff0019166101001790555b611bd4612967565b6065611be089826134f5565b50606980546001600160a01b03808a166001600160a01b031992831617909255606880549289169290911682179055604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905163fc0c546a916004808201926020929091908290030181865afa158015611c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8791906135b5565b6001600160a01b0316876001600160a01b031614611ce75760405162461bcd60e51b815260206004820152600e60248201527f6e6f742073616d6520746f6b656e00000000000000000000000000000000000060448201526064016107c1565b606b80546001600160a01b038088166001600160a01b031992831617909255606c8054878416908316179055606d805492861692909116919091179055611d308261016c6135d2565b611d3d90620151806135d2565b60725562093a806073558015611467576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050505050565b611d9e611ff0565b6001600160a01b038116611ddd5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b60448201526064016107c1565b607980546001600160a01b0319166001600160a01b0392909216919091179055565b6068546071546040517fb45a3c0e00000000000000000000000000000000000000000000000000000000815260009283926001600160a01b039091169163b45a3c0e91611e529160040190815260200190565b6040805180830381865afa158015611e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9291906135e9565b506fffffffffffffffffffffffffffffffff1692915050565b60658054611eb890613475565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee490613475565b8015611f315780601f10611f0657610100808354040283529160200191611f31565b820191906000526020600020905b815481529060010190602001808311611f1457829003601f168201915b505050505081565b611f41611ff0565b6001600160a01b038116611fbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107c1565b6107d381612719565b60788181548110611fd657600080fd5b6000918252602090912001546001600160a01b0316905081565b6033546001600160a01b031633146109445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107c1565b6069546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120b791906133b1565b9050808211156121095760405162461bcd60e51b815260206004820152601c60248201527f416d6f756e74206578636565647320706561726c2062616c616e63650000000060448201526064016107c1565b606854606954612127916001600160a01b0391821691166000612819565b606854606954612144916001600160a01b03918216911684612819565b6068546071546040517fa183af520000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163a183af5291612199918690600401918252602082015260400190565b600060405180830381600087803b1580156121b357600080fd5b505af1158015610e62573d6000803e3d6000fd5b606b546071546040517f310bd74b0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163310bd74b916111149160040190815260200190565b6068546071546040517fa4d855df0000000000000000000000000000000000000000000000000000000081526001600160a01b039092169163a4d855df9161226a918590600401918252602082015260400190565b600060405180830381600087803b15801561228457600080fd5b505af1158015612298573d6000803e3d6000fd5b5050505050565b60006122ab828461361d565b90505b92915050565b606a54604080517fb97dd9e200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163b97dd9e29160048083019260209291908290030181865afa158015612317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061233b91906133b1565b600081815260746020526040902054909150156107d35760008181526075602090815260409182902080548351818402810184019094528084526107d393928301828280156123b357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612395575b5050506000858152607560209081526040918290206001018054835181840281018401909452808452929450925083018282801561241057602002820191906000526020600020905b8154815260200190600101908083116123fc575b50505050505b80518251146124675760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e206c656e67746820646f65736e2774206d6174636800000000000060448201526064016107c1565b8151606b546071546040517f7ac09bf70000000000000000000000000000000000000000000000000000000081526001600160a01b0390921691637ac09bf7916124b79187908790600401613630565b600060405180830381600087803b1580156124d157600080fd5b505af11580156124e5573d6000803e3d6000fd5b50505050612506604051806040016040528060608152602001606081525090565b8167ffffffffffffffff81111561251f5761251f61300a565b604051908082528060200260200182016040528015612548578160200160208202803683370190505b50508381528167ffffffffffffffff8111156125665761256661300a565b60405190808252806020026020018201604052801561258f578160200160208202803683370190505b505060208082018490528151805183926066926125b29284929190910190612d1f565b5060208281015180516125cb9260018501920190612d84565b5090505060715460746000606a60009054906101000a90046001600160a01b03166001600160a01b031663b97dd9e26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612629573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264d91906133b1565b815260200190815260200160002081905550606660756000606a60009054906101000a90046001600160a01b03166001600160a01b031663b97dd9e26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dc91906133b1565b8152602081019190915260400160002081546126fb9082908490612dbf565b50600182810180546127109284019190612dbf565b50505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0383166024820152604481018290526128149084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526129ec565b505050565b8015806128ac57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015612886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128aa91906133b1565b155b61291e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016107c1565b6040516001600160a01b0383166024820152604481018290526128149084907f095ea7b300000000000000000000000000000000000000000000000000000000906064016127b0565b600054610100900460ff166129e45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c1565b610944612ad4565b6000612a41826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b5a9092919063ffffffff16565b9050805160001480612a62575080806020019051810190612a629190613665565b6128145760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016107c1565b600054610100900460ff16612b515760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107c1565b61094433612719565b6060612b698484600085612b71565b949350505050565b606082471015612be95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016107c1565b600080866001600160a01b03168587604051612c059190613682565b60006040518083038185875af1925050503d8060008114612c42576040519150601f19603f3d011682016040523d82523d6000602084013e612c47565b606091505b5091509150612c5887838387612c63565b979650505050505050565b60608315612cd2578251600003612ccb576001600160a01b0385163b612ccb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107c1565b5081612b69565b612b698383815115612ce75781518083602001fd5b8060405162461bcd60e51b81526004016107c19190613316565b50805460008255906000526020600020908101906107d39190612dff565b828054828255906000526020600020908101928215612d74579160200282015b82811115612d7457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612d3f565b50612d80929150612dff565b5090565b828054828255906000526020600020908101928215612d74579160200282015b82811115612d74578251825591602001919060010190612da4565b828054828255906000526020600020908101928215612d745760005260206000209182015b82811115612d74578254825591600101919060010190612de4565b5b80821115612d805760008155600101612e00565b6001600160a01b03811681146107d357600080fd5b8035612e3481612e14565b919050565b600060208284031215612e4b57600080fd5b8135612e5681612e14565b9392505050565b600060208284031215612e6f57600080fd5b5035919050565b600081518084526020808501945080840160005b83811015612eaf5781516001600160a01b031687529582019590820190600101612e8a565b509495945050505050565b600060208083528351604082850152612ed66060850182612e76565b85830151858203601f19016040870152805180835290840192506000918401905b80831015612f175783518252928401926001929092019190840190612ef7565b509695505050505050565b60008060408385031215612f3557600080fd5b823591506020830135612f4781612e14565b809150509250929050565b60008083601f840112612f6457600080fd5b50813567ffffffffffffffff811115612f7c57600080fd5b6020830191508360208260051b8501011115612f9757600080fd5b9250929050565b60008060008060408587031215612fb457600080fd5b843567ffffffffffffffff80821115612fcc57600080fd5b612fd888838901612f52565b90965094506020870135915080821115612ff157600080fd5b50612ffe87828801612f52565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156130495761304961300a565b604052919050565b600067ffffffffffffffff82111561306b5761306b61300a565b5060051b60200190565b600082601f83011261308657600080fd5b8135602061309b61309683613051565b613020565b82815260059290921b840181019181810190868411156130ba57600080fd5b8286015b84811015612f175780356130d181612e14565b83529183019183016130be565b600080604083850312156130f157600080fd5b823567ffffffffffffffff8082111561310957600080fd5b61311586838701613075565b935060209150818501358181111561312c57600080fd5b8501601f8101871361313d57600080fd5b803561314b61309682613051565b81815260059190911b8201840190848101908983111561316a57600080fd5b8584015b838110156131a2578035868111156131865760008081fd5b6131948c8983890101613075565b84525091860191860161316e565b508096505050505050509250929050565b600080604083850312156131c657600080fd5b50508035926020909101359150565b80151581146107d357600080fd5b6000602082840312156131f557600080fd5b8135612e56816131d5565b600080600080600080600060e0888a03121561321b57600080fd5b873567ffffffffffffffff8082111561323357600080fd5b818a0191508a601f83011261324757600080fd5b813560208282111561325b5761325b61300a565b61326d81601f19601f85011601613020565b92508183528c8183860101111561328357600080fd5b81818501828501376000818385010152829a506132a1818d01612e29565b9950505050506132b360408901612e29565b94506132c160608901612e29565b93506132cf60808901612e29565b92506132dd60a08901612e29565b915060c0880135905092959891949750929550565b60005b8381101561330d5781810151838201526020016132f5565b50506000910152565b60208152600082518060208401526133358160408501602087016132f2565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015612eaf57815187529582019590820190600101613373565b6040815260006133a2604083018561335f565b90508260208301529392505050565b6000602082840312156133c357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600060001982036133f3576133f36133ca565b5060010190565b60608152600061340d6060830186612e76565b6020838203818501528186518084528284019150828160051b85010183890160005b8381101561345d57601f1987840301855261344b838351612e76565b9486019492509085019060010161342f565b50508095505050505050826040830152949350505050565b600181811c9082168061348957607f821691505b6020821081036134a957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561281457600081815260208120601f850160051c810160208610156134d65750805b601f850160051c820191505b81811015610e62578281556001016134e2565b815167ffffffffffffffff81111561350f5761350f61300a565b6135238161351d8454613475565b846134af565b602080601f83116001811461355857600084156135405750858301515b600019600386901b1c1916600185901b178555610e62565b600085815260208120601f198616915b8281101561358757888601518255948401946001909101908401613568565b50858210156135a55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156135c757600080fd5b8151612e5681612e14565b80820281158282048414176122ae576122ae6133ca565b600080604083850312156135fc57600080fd5b825180600f0b811461360d57600080fd5b6020939093015192949293505050565b818103818111156122ae576122ae6133ca565b8381526060602082015260006136496060830185612e76565b828103604084015261365b818561335f565b9695505050505050565b60006020828403121561367757600080fd5b8151612e56816131d5565b600082516136948184602087016132f2565b919091019291505056fea264697066735822122002ae17cb4dc09dfe8f82c63605854686d6377de817e1c4dcd7eb71d207a78bfb64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 671,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4792,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "__NAME__",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 4802,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "lastVote",
        "offset": 0,
        "slot": "102",
        "type": "t_struct(VoteInfo)4799_storage"
      },
      {
        "astId": 4804,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "vePearl",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 4806,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "pearl",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 4808,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "caviarManager",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 4810,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "pearlVoter",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 4812,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "feeManager",
        "offset": 0,
        "slot": "108",
        "type": "t_address"
      },
      {
        "astId": 4814,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "pearlRewardsDistributor",
        "offset": 0,
        "slot": "109",
        "type": "t_address"
      },
      {
        "astId": 4816,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "cvrPearlGauge",
        "offset": 0,
        "slot": "110",
        "type": "t_address"
      },
      {
        "astId": 4820,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "isBoostStrategy",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4824,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "isAllowedVoter",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4826,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "tokenId",
        "offset": 0,
        "slot": "113",
        "type": "t_uint256"
      },
      {
        "astId": 4828,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "MAX_TIME",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 4830,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "WEEK",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 4834,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "tokenIdAt",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4839,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "voteInfoAt",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_uint256,t_struct(VoteInfo)4799_storage)"
      },
      {
        "astId": 4843,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "isKeeper",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4847,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "lastBribe",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4850,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "bribeTokens",
        "offset": 0,
        "slot": "120",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4852,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "manualFeeManager",
        "offset": 0,
        "slot": "121",
        "type": "t_address"
      },
      {
        "astId": 4854,
        "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
        "label": "isManual",
        "offset": 20,
        "slot": "121",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(VoteInfo)4799_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CaviarStrategy.VoteInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(VoteInfo)4799_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(VoteInfo)4799_storage": {
        "encoding": "inplace",
        "label": "struct CaviarStrategy.VoteInfo",
        "members": [
          {
            "astId": 4795,
            "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
            "label": "pairs",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4798,
            "contract": "contracts/CaviarStrategy.sol:CaviarStrategy",
            "label": "weights",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0xa0F834fd21cC5d8E39b13A96432514D345301048",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DisableVePearlDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmissionsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EnableVePearlDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "IncreaseAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "InitialLock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "KeeperAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        }
      ],
      "name": "KeeperRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Rebase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemed",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SetBeginTimestamp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pearl",
          "type": "address"
        }
      ],
      "name": "SetPearl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "SetPearlPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "set",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "SetPromotionPeriod",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXTIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VE_DEPOSIT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VE_DEPOSIT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROMO_VE_DEPOSIT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEEM_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEEK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__NAME__",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "addKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beginTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caviar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caviarSupplyAtCurrentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLPRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "depositNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableVePearlDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableVePearlDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_epoch",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_caviar",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pearl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vePearl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pearlPair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lockingYear",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isKeeper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPromotionPeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintedFromNftAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pearl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pearlPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "removeKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "setBeginTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pearl",
          "type": "address"
        }
      ],
      "name": "setPearl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "setPearlPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isPromotionPeriod",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        }
      ],
      "name": "setPromotionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vePearl",
          "type": "address"
        }
      ],
      "name": "setVEPearl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartWalletWhitelist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veDepositEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vePearl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vePearlLastBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ec34062b8af25aca226d135c55cee1760f06019577fec14a7141b502bdb8bb0",
  "receipt": {
    "to": null,
    "from": "0x3d41487A3c5662eDE90D0eE8854f3cC59E8D66AD",
    "contractAddress": "0xa0F834fd21cC5d8E39b13A96432514D345301048",
    "transactionIndex": 59,
    "gasUsed": "2817805",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000400040000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000080000000000000000000200000081000000000000000000404000000000000000000000000000000004000000000000000000001000000040000000000000000000000100000000000000000000000000000020000000000000000000000000000000000000000100000",
    "blockHash": "0x62482f1f6ccb52e07e085e105c4ebfde12eed6ffd20fe9f0bf3eaf34807e6b9b",
    "transactionHash": "0x3ec34062b8af25aca226d135c55cee1760f06019577fec14a7141b502bdb8bb0",
    "logs": [
      {
        "transactionIndex": 59,
        "blockNumber": 47179918,
        "transactionHash": "0x3ec34062b8af25aca226d135c55cee1760f06019577fec14a7141b502bdb8bb0",
        "address": "0xa0F834fd21cC5d8E39b13A96432514D345301048",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 787,
        "blockHash": "0x62482f1f6ccb52e07e085e105c4ebfde12eed6ffd20fe9f0bf3eaf34807e6b9b"
      },
      {
        "transactionIndex": 59,
        "blockNumber": 47179918,
        "transactionHash": "0x3ec34062b8af25aca226d135c55cee1760f06019577fec14a7141b502bdb8bb0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003d41487a3c5662ede90d0ee8854f3cc59e8d66ad",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000e23bc251dc854800000000000000000000000000000000000000000000000161e7b936db7b68360000000000000000000000000000000000000000000251cc126acc9d28223bab00000000000000000000000000000000000000000000000161057d74899ee2ee0000000000000000000000000000000000000000000251cc134d085f79fec0f3",
        "logIndex": 788,
        "blockHash": "0x62482f1f6ccb52e07e085e105c4ebfde12eed6ffd20fe9f0bf3eaf34807e6b9b"
      }
    ],
    "blockNumber": 47179918,
    "cumulativeGasUsed": "14287150",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "6c2a9fe06fb97f87329a85320378bcfa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableVePearlDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmissionsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableVePearlDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncreaseAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"InitialLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"KeeperAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"KeeperRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetBeginTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pearl\",\"type\":\"address\"}],\"name\":\"SetPearl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"SetPearlPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SetPromotionPeriod\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VE_DEPOSIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VE_DEPOSIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROMO_VE_DEPOSIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__NAME__\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"addKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caviar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caviarSupplyAtCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLPRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"depositNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableVePearlDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableVePearlDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_caviar\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pearl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vePearl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pearlPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockingYear\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPromotionPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedFromNftAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pearl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pearlPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"removeKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setBeginTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pearl\",\"type\":\"address\"}],\"name\":\"setPearl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setPearlPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPromotionPeriod\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"setPromotionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vePearl\",\"type\":\"address\"}],\"name\":\"setVEPearl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartWalletWhitelist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veDepositEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vePearl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vePearlLastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CaviarManager.sol\":\"CaviarManager\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/CaviarManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/ICaviarStrategy.sol\\\";\\nimport \\\"./interfaces/ICaviarChef.sol\\\";\\nimport \\\"./interfaces/ICaviar.sol\\\";\\nimport \\\"./interfaces/IPearlPair.sol\\\";\\nimport \\\"./interfaces/ICaviarFeeManager.sol\\\";\\nimport \\\"./interfaces/IVePearl.sol\\\";\\n\\ncontract CaviarManager is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    string public __NAME__;\\n    address public pearl;\\n    uint256 public MAXTIME;\\n    uint256 public WEEK;\\n    uint256 public MIN_VE_DEPOSIT_FEE;\\n    uint256 public MAX_VE_DEPOSIT_FEE;\\n\\n    address public feeManager;\\n    address public strategy;\\n    address public caviar;\\n    address public vePearl;\\n\\n    address public pearlPair;\\n\\n    address public smartWalletWhitelist; // deprecated\\n\\n    bool public veDepositEnabled;\\n    bool public isPromotionPeriod;\\n    uint256 public PROMO_VE_DEPOSIT_FEE;\\n    uint256 public MULTIPLIER;\\n    uint256 public REDEEM_FEE;\\n\\n    uint256 public beginTimestamp;\\n\\n    uint256 public caviarSupplyAtCurrentEpoch;\\n\\n    mapping(uint256 => uint256) public mintedFromNftAt;\\n    mapping(address => bool) public isKeeper;\\n\\n    bool public redeemEnabled;\\n\\n    uint256 public vePearlLastBalance;\\n\\n    event InitialLock(uint256 unlockTime);\\n    event IncreaseAmount(uint256 amount);\\n    event SetPromotionPeriod(bool set, uint256 fee);\\n    event SetBeginTimestamp(uint256 timestamp);\\n    event Deposit(address indexed sender, uint256 amount);\\n    event DepositNFT(address indexed sender, uint256 tokenId, uint256 amount);\\n    event Redeem(address indexed sender, uint256 amount, uint256 redeemed);\\n    event SetPearl(address pearl);\\n    event SetPearlPair(address pair);\\n    event EnableVePearlDeposit();\\n    event DisableVePearlDeposit();\\n    event Rebase(uint amount);\\n    event EmissionsClaimed(uint256 amount);\\n    event KeeperAdded(address indexed keeper);\\n    event KeeperRemoved(address indexed keeper);\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string memory _name,\\n        address _strategy,\\n        address _caviar,\\n        address _pearl,\\n        address _vePearl,\\n        address _pearlPair,\\n        address _feeManager,\\n        uint _lockingYear // eg.: crv = 4, lqdr = 2\\n    ) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        __NAME__ = _name;\\n        feeManager = _feeManager;\\n        strategy = _strategy;\\n\\n        caviar = _caviar;\\n        vePearl = _vePearl;\\n\\n        pearlPair = _pearlPair;\\n\\n        MAXTIME = _lockingYear * 364 * 86400;\\n        WEEK = 7 * 86400;\\n        pearl = _pearl;\\n\\n        veDepositEnabled = true;\\n        isPromotionPeriod = false;\\n\\n        MIN_VE_DEPOSIT_FEE = 125;\\n        MAX_VE_DEPOSIT_FEE = 700;\\n        MULTIPLIER = 1000;\\n\\n        REDEEM_FEE = 35;\\n\\n        redeemEnabled = true;\\n\\n        vePearlLastBalance = 0;\\n    }\\n\\n    // --- modifiers ---\\n\\n    modifier onlyOwnerOrStrategy() {\\n        require(msg.sender == owner() || msg.sender == strategy, \\\"Auth failed\\\");\\n        _;\\n    }\\n\\n    modifier keeper() {\\n        require(isKeeper[msg.sender] == true || msg.sender == owner(), \\\"not keeper\\\");\\n        _;\\n    }\\n\\n    // --- Setters ---\\n\\n    function _initialLock() internal {\\n        //create new lock\\n        uint256 _strategyBalance = IERC20(pearl).balanceOf(strategy);\\n        ICaviarStrategy(strategy).createLock(_strategyBalance, MAXTIME);\\n        vePearlLastBalance = _strategyBalance;\\n\\n        emit InitialLock(MAXTIME);\\n    }\\n\\n    function _increaseAmount(uint256 _amount) internal {\\n        IERC20(pearl).safeTransfer(strategy, _amount);\\n\\n        uint256 _pearlLocked = ICaviarStrategy(strategy).balanceOfVePearl();\\n\\n        if (_pearlLocked > 0) {\\n            //increase amount\\n            ICaviarStrategy(strategy).increaseAmount(_amount);\\n            vePearlLastBalance += _amount;\\n        } else {\\n            _initialLock();\\n        }\\n        emit IncreaseAmount(_amount);\\n    }\\n\\n    function setPromotionPeriod(bool _isPromotionPeriod, uint256 _depositFee) public onlyOwner {\\n        require(isPromotionPeriod == !_isPromotionPeriod, \\\"Already set\\\");\\n        isPromotionPeriod = _isPromotionPeriod;\\n        if (_isPromotionPeriod == true) {\\n            PROMO_VE_DEPOSIT_FEE = _depositFee;\\n        }\\n\\n        emit SetPromotionPeriod(_isPromotionPeriod, _depositFee);\\n    }\\n\\n    function setBeginTimestamp(uint256 _timestamp) external onlyOwner {\\n        beginTimestamp = _timestamp;\\n\\n        emit SetBeginTimestamp(_timestamp);\\n    }\\n\\n    function setPearlPair(address _pair) external onlyOwner {\\n        require(_pair != address(0), \\\"addr 0\\\");\\n        pearlPair = _pair;\\n        emit SetPearlPair(_pair);\\n    }\\n\\n    function setPearl(address _pearl) external onlyOwner {\\n        require(_pearl != address(0), \\\"addr 0\\\");\\n        pearl = _pearl;\\n        emit SetPearl(_pearl);\\n    }\\n\\n    function setVEPearl(address _vePearl) external onlyOwner {\\n        require(_vePearl != address(0), \\\"addr 0\\\");\\n        vePearl = _vePearl;\\n        emit SetPearl(_vePearl);\\n    }\\n\\n    function enableVePearlDeposit() external onlyOwner {\\n        require(veDepositEnabled == false, \\\"VePearl Depoist is already enabled\\\");\\n        veDepositEnabled = true;\\n        emit EnableVePearlDeposit();\\n    }\\n\\n    function disableVePearlDeposit() external onlyOwner {\\n        require(veDepositEnabled == true, \\\"VePearl Depoist is already disabled\\\");\\n        veDepositEnabled = false;\\n        emit DisableVePearlDeposit();\\n    }\\n\\n    function enableRedeem() public onlyOwnerOrStrategy {\\n        redeemEnabled = true;\\n    }\\n\\n    function disableRedeem() public onlyOwnerOrStrategy {\\n        redeemEnabled = false;\\n    }\\n\\n    function addKeeper(address _keeper) external onlyOwner {\\n        require(_keeper != address(0));\\n        require(isKeeper[_keeper] == false);\\n        isKeeper[_keeper] = true;\\n        emit KeeperAdded(_keeper);\\n    }\\n\\n    function removeKeeper(address _keeper) external onlyOwner {\\n        require(_keeper != address(0));\\n        require(isKeeper[_keeper] == true);\\n        isKeeper[_keeper] = false;\\n        emit KeeperRemoved(_keeper);\\n    }\\n\\n    // --- Main functions ---\\n\\n    function _deposit(uint256 _amount) internal {\\n        require(_amount != 0, \\\"!>0\\\");\\n        IERC20(pearl).safeTransferFrom(msg.sender, address(this), _amount);\\n        _increaseAmount(_amount);\\n        ICaviar(caviar).mint(msg.sender, _amount);\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    //deposit 'underlying' for liVeNFT\\n    function deposit(uint256 _amount) external nonReentrant {\\n        _deposit(_amount);\\n    }\\n\\n    function depositAll() external nonReentrant {\\n        uint256 _amount = IERC20(pearl).balanceOf(msg.sender);\\n        _deposit(_amount);\\n    }\\n\\n    function depositNFT(uint256 _tokenId) public nonReentrant {\\n        require(veDepositEnabled, \\\"NFT Deposit is not enabled\\\");\\n\\n        uint256 _depositFee;\\n\\n        if (isPromotionPeriod) {\\n            _depositFee = PROMO_VE_DEPOSIT_FEE;\\n        } else {\\n            _depositFee = getCurrentDepositFee();\\n        }\\n\\n        (int128 _lockedAmount, ) = IVePearl(vePearl).locked(_tokenId);\\n        uint256 _locked = _int128ToUint256(_lockedAmount);\\n\\n        uint256 _toMint = _locked.mul(MULTIPLIER - _depositFee).div(MULTIPLIER);\\n\\n        IVePearl(vePearl).transferFrom(msg.sender, strategy, _tokenId);\\n        ICaviarStrategy(strategy).merge(_tokenId);\\n        vePearlLastBalance += _locked;\\n\\n        mintedFromNftAt[getCurrentEpoch()] += _toMint;\\n\\n        ICaviar(caviar).mint(msg.sender, _toMint);\\n\\n        emit DepositNFT(msg.sender, _tokenId, _toMint);\\n    }\\n\\n    function redeem(uint256 _amount) external nonReentrant {\\n        require(redeemEnabled, \\\"Redeem disabled\\\");\\n        uint256 _toRedeem = _amount.mul(MULTIPLIER - REDEEM_FEE).div(MULTIPLIER);\\n        ICaviarStrategy(strategy).splitAndSend(_toRedeem, msg.sender);\\n        vePearlLastBalance -= _toRedeem;\\n        ICaviar(caviar).burn(msg.sender, _amount);\\n\\n        emit Redeem(msg.sender, _amount, _toRedeem);\\n    }\\n\\n    function rebase() external keeper returns (uint256) {\\n        uint _before = vePearlLastBalance;\\n        ICaviarStrategy(strategy).claimRebase();\\n        vePearlLastBalance = ICaviarStrategy(strategy).balanceOfVePearl();\\n        uint _claimed = vePearlLastBalance.sub(_before);\\n\\n        ICaviar(caviar).mint(feeManager, _claimed);\\n        ICaviarFeeManager(feeManager).distributeRebaseFees(_claimed);\\n        caviarSupplyAtCurrentEpoch = ICaviar(caviar).totalSupply();\\n\\n        emit Rebase(_claimed);\\n        return _claimed;\\n    }\\n\\n    function claimLPRewards() external keeper returns (uint256) {\\n        uint256 _amountClaimed = ICaviarChef(ICaviarFeeManager(feeManager).lpChef()).claimEmissions();\\n\\n        // increase perl amount\\n        if (_amountClaimed != 0){\\n            _increaseAmount(_amountClaimed);\\n            // mint and send to fee distributor\\n            ICaviar(caviar).mint(feeManager, _amountClaimed);\\n            ICaviarFeeManager(feeManager).distributeEmissions(_amountClaimed);\\n            caviarSupplyAtCurrentEpoch = ICaviar(caviar).totalSupply();\\n\\n            emit EmissionsClaimed(_amountClaimed);\\n        }\\n        return _amountClaimed;\\n    }\\n\\n    // --- Getters ---\\n\\n    function _getPearlPairAvgReserves() internal view returns (uint256 _caviarReserve, uint256 _pearlReserve) {\\n        IPearlPair.Observation memory _observation = IPearlPair(pearlPair).lastObservation();\\n        (uint256 _reserve0Cumulative, uint256 _reserve1Cumulative, ) = IPearlPair(pearlPair).currentCumulativePrices();\\n        if (block.timestamp == _observation.timestamp) {\\n            uint256 _observationLength = IPearlPair(pearlPair).observationLength();\\n            _observation = IPearlPair(pearlPair).observations(_observationLength - 2);\\n        }\\n\\n        uint256 timeElapsed = block.timestamp - _observation.timestamp;\\n        uint256 _reserve0 = (_reserve0Cumulative - _observation.reserve0Cumulative) / timeElapsed;\\n        uint256 _reserve1 = (_reserve1Cumulative - _observation.reserve1Cumulative) / timeElapsed;\\n\\n        if (caviar == IPearlPair(pearlPair).token0()) {\\n            (_caviarReserve, _pearlReserve) = (_reserve0, _reserve1);\\n        } else {\\n            (_caviarReserve, _pearlReserve) = (_reserve1, _reserve0);\\n        }\\n    }\\n\\n    function _getPearlPairCurrentReserves() internal view returns (uint256 _caviarReserve, uint256 _pearlReserve) {\\n        uint256 _reserve0 = IPearlPair(pearlPair).reserve0();\\n        uint256 _reserve1 = IPearlPair(pearlPair).reserve1();\\n\\n        if (caviar == IPearlPair(pearlPair).token0()) {\\n            (_caviarReserve, _pearlReserve) = (_reserve0, _reserve1);\\n        } else {\\n            (_caviarReserve, _pearlReserve) = (_reserve1, _reserve0);\\n        }\\n    }\\n\\n    function getCurrentDepositFee() public view returns (uint256) {\\n        if (isPromotionPeriod) return PROMO_VE_DEPOSIT_FEE;\\n\\n        if (pearlPair == address(0)) return MIN_VE_DEPOSIT_FEE;\\n\\n        (uint256 _reserveCaviar, uint256 _reservePearl) = _getPearlPairAvgReserves();\\n        uint256 _depositFee;\\n        if (_reservePearl > 0) {\\n            _depositFee = _reserveCaviar.mul(MIN_VE_DEPOSIT_FEE).div(_reservePearl);\\n        }\\n\\n        (_reserveCaviar, _reservePearl) = _getPearlPairCurrentReserves();\\n        if (_reservePearl > 0) {\\n            uint256 _depositFeeCurrent = _reserveCaviar.mul(MIN_VE_DEPOSIT_FEE).div(_reservePearl);\\n            if (_depositFeeCurrent > _depositFee) {\\n                _depositFee = _depositFeeCurrent;\\n            }\\n        }\\n\\n        if (_depositFee < MIN_VE_DEPOSIT_FEE) {\\n            _depositFee = MIN_VE_DEPOSIT_FEE;\\n        }\\n        if (_depositFee > MAX_VE_DEPOSIT_FEE) {\\n            _depositFee = MAX_VE_DEPOSIT_FEE;\\n        }\\n\\n        return _depositFee;\\n    }\\n\\n    function getCurrentEpoch() public view returns (uint256 _epoch) {\\n        _epoch = (block.timestamp - beginTimestamp) / WEEK;\\n    }\\n\\n    function _int128ToUint256(int128 _num) internal pure returns (uint256) {\\n        int256 _num256 = int256(_num);\\n\\n        if (_num < 0) {\\n            _num256 = _num256 & int256(type(int128).max);\\n        }\\n\\n        uint256 _result = uint256(_num256);\\n        return _result;\\n    }\\n}\\n\",\"keccak256\":\"0x685505ec2a405967b9b37bd836f2a375bf50dc2dce3a5db33343f21f881ac86b\",\"license\":\"MIT\"},\"contracts/interfaces/ICaviar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ICaviar {\\n    function mint(address,uint256) external;\\n    function burn(address,uint256) external;\\n    function updateSupplyAtCurrentEpoch(uint256) external;\\n    function totalSupply() external view returns(uint256);\\n    function supplyAtCurrentEpoch() external view returns(uint256);\\n}\",\"keccak256\":\"0x401ed42302f61c68ca83f5279176b653304942aaf53d3c771ed6b6e527d31745\",\"license\":\"MIT\"},\"contracts/interfaces/ICaviarChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICaviarChef {\\n    function balanceOf() external view returns(uint256);\\n    function userInfo(address _user) external view returns (uint256, uint256);\\n    function update(address from, address to) external;\\n    function harvestRebase(address from, address to) external;\\n    function underlying() external view returns (IERC20);\\n    function seedRewards(uint256 _amount) external;\\n    function claimEmissions() external returns (uint256);\\n}\",\"keccak256\":\"0x89728ee4da4f7e4b5205e029f0e28be8429e8df8ab3c93d973a4a7f8dee941ec\",\"license\":\"MIT\"},\"contracts/interfaces/ICaviarFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ICaviarFeeManager {\\n    function distributeFees() external;\\n    function distributeRebaseFees(uint) external;\\n    function distributeEmissions(uint) external;\\n    function lpChef() external view returns (address);\\n}\",\"keccak256\":\"0x1c5d769d7858db2c7837bdde41312f428cb00fdf6d53f5e205e9e4b44f84c805\",\"license\":\"MIT\"},\"contracts/interfaces/ICaviarStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ICaviarStrategy {\\n    \\n    function balanceOfVePearl() external view returns (uint256);\\n\\n    function deposit(address, address) external;\\n\\n    function withdraw(address) external;\\n\\n    function withdraw(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAll(address, address) external;\\n\\n    function createLock(uint256, uint256) external;\\n\\n    function increaseAmount(uint256) external;\\n\\n    function increaseTime(uint256) external;\\n\\n    function increaseTimeMax() external;\\n\\n    function release() external;\\n\\n    function claimGaugeReward(address _gauge, address _depositor) external;\\n\\n    function claimSpirit(address) external returns (uint256);\\n\\n    function claimRewards(address) external;\\n\\n    function claimFees(address, address) external;\\n\\n    function claimRebase() external;\\n\\n    function setStashAccess(address, bool) external;\\n\\n    function vote(\\n        uint256,\\n        address,\\n        bool\\n    ) external;\\n\\n    function voteGaugeWeight(address, uint256) external;\\n\\n    function balanceOfPool(address) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n\\n    function merge(\\n        uint256 _tokenId\\n    ) external;\\n    function splitAndSend(uint _amount, address _to) external;\\n}\",\"keccak256\":\"0xc31faec77820d83f001ce2b914f8cfb917c3a7bf9d11ed3546543d197092c96c\",\"license\":\"MIT\"},\"contracts/interfaces/IPearlPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IPearlPair {\\n    struct Observation {\\n        uint256 timestamp;\\n        uint256 reserve0Cumulative;\\n        uint256 reserve1Cumulative;\\n    }\\n\\n    function metadata() external view returns (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, address t1);\\n    function claimFees() external returns (uint, uint);\\n    function tokens() external view returns (address, address);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves() external view returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n\\n    function name() external view returns(string memory);\\n    function symbol() external view returns(string memory);\\n    function totalSupply() external view returns (uint);\\n    function decimals() external view returns (uint8);\\n\\n    function claimable0(address _user) external view returns (uint);\\n    function claimable1(address _user) external view returns (uint);\\n\\n    function isStable() external view returns(bool);\\n\\n\\n    function token0() external view returns(address);\\n    function reserve0() external view returns(uint256);\\n    function decimals0() external view returns(uint256);\\n    function token1() external view returns(address);\\n    function reserve1() external view returns(uint256);\\n    function decimals1() external view returns(uint256);\\n\\n    function currentCumulativePrices() external view returns (uint256 _reserve0Cumulative, uint256 _reserve1Cumulative, uint256 _blockTimestamp);\\n    function lastObservation() external view returns (Observation memory);\\n    function observationLength() external view returns (uint256);\\n    function observations(uint256 _index) external view returns(Observation memory);\\n}\\n\",\"keccak256\":\"0xd1433ad4afc70404d522505ab4ba4593eb076dd162ce60bc9985292bb79bd1f9\",\"license\":\"MIT\"},\"contracts/interfaces/IVePearl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\npragma experimental ABIEncoderV2;\\ninterface IVePearl {\\n\\n    struct Point {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    // struct LockedBalance {\\n    //     int128 amount;\\n    //     uint end;\\n    // }\\n\\n    function create_lock_for(uint _value, uint _lock_duration, address _to) external returns (uint);\\n\\n    // function locked(uint id) external view returns(LockedBalance memory);\\n    function locked(uint id) external view returns(int128 amount, uint end);\\n    function tokenOfOwnerByIndex(address _owner, uint _tokenIndex) external view returns (uint);\\n\\n    function token() external view returns (address);\\n    function team() external view returns (address);\\n    function epoch() external view returns (uint);\\n    function point_history(uint loc) external view returns (Point memory);\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\n    function transferFrom(address, address, uint) external;\\n\\n    function voted(uint) external view returns (bool);\\n    function attachments(uint) external view returns (uint);\\n    function voting(uint tokenId) external;\\n    function abstain(uint tokenId) external;\\n    function attach(uint tokenId) external;\\n    function detach(uint tokenId) external;\\n\\n    function checkpoint() external;\\n    function deposit_for(uint tokenId, uint value) external;\\n\\n    function balanceOfNFT(uint _id) external view returns (uint);\\n    function balanceOf(address _owner) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function supply() external view returns (uint);\\n\\n\\n    function decimals() external view returns(uint8);\\n\\n    function create_lock(uint _value, uint _lock_duration) external returns(uint);\\n    function withdraw(uint _tokenId) external;\\n    function increase_amount(uint _tokenId, uint _value) external;\\n    function increase_unlock_time(uint _tokenId, uint _lock_duration) external;\\n    function merge(uint _from, uint _to) external;\\n    function split(uint[] memory amounts, uint _tokenId) external;\\n    function approve(address _approved, uint _tokenId) external;\\n\\n    function tokenId() external view returns (uint256);\\n}\",\"keccak256\":\"0x0f89fc95588439b484d51e9ac15c60de238956279a802d69cf93b13e74ac9548\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6131b380620000f36000396000f3fe608060405234801561001057600080fd5b506004361061030a5760003560e01c806389991eff1161019c578063db006a75116100ee578063ee00ef3a11610097578063f4359ce511610071578063f4359ce5146105e3578063f46c37e8146105ec578063ff781641146105f557600080fd5b8063ee00ef3a146105b2578063f1819bb5146105bb578063f2fde38b146105d057600080fd5b8063df381efd116100c8578063df381efd14610579578063e841b6261461058c578063e91a7ca61461059f57600080fd5b8063db006a751461054b578063dc19c4d81461055e578063de5f62681461057157600080fd5b8063b20150df11610150578063b97dd9e21161012a578063b97dd9e214610523578063d0fb02031461052b578063d2f825361461053e57600080fd5b8063b20150df146104ff578063b59ca79914610508578063b6b55f251461051057600080fd5b806399a10fa21161018157806399a10fa2146104c4578063a8c62e76146104e4578063af14052c146104f757600080fd5b806389991eff146104a05780638da5cb5b146104b357600080fd5b80633cad2a0a1161026057806369af495b11610209578063715018a6116101e3578063715018a61461047c57806380ef238d14610484578063819674e31461048c57600080fd5b806369af495b146104335780636ba42aaa146104465780637001cbe11461046957600080fd5b8063569482d71161023a578063569482d71461040457806367244d3714610417578063672a0fb81461042a57600080fd5b80633cad2a0a146103e05780634032b72b146103e857806352f0699c146103fb57600080fd5b806314ae9f2e116102c2578063268155bd1161029c578063268155bd146103bb578063345b5980146103ce5780633845fbf3146103d757600080fd5b806314ae9f2e146103595780631eab5bec1461036c578063217c1d681461039057600080fd5b8063061873e8116102f3578063061873e814610333578063081744511461033d578063138731011461034657600080fd5b8063059f8b161461030f57806305c09c8c1461032b575b600080fd5b61031860a45481565b6040519081526020015b60405180910390f35b6103186105fd565b61033b6106cd565b005b610318609c5481565b61033b610354366004612c6b565b610750565b61033b610367366004612cbc565b61083c565b60a25461038090600160a01b900460ff1681565b6040519015158152602001610322565b609f546103a3906001600160a01b031681565b6040516001600160a01b039091168152602001610322565b61033b6103c9366004612cbc565b6108ca565b610318609b5481565b61031860a75481565b610318610973565b61033b6103f6366004612cbc565b610c79565b61031860a35481565b60a2546103a3906001600160a01b031681565b60a0546103a3906001600160a01b031681565b61031860a65481565b61033b610441366004612cbc565b610d06565b610380610454366004612cbc565b60a96020526000908152604090205460ff1681565b61033b610477366004612cbc565b610da8565b61033b610e4a565b61033b610e5e565b60a25461038090600160a81b900460ff1681565b61033b6104ae366004612cd9565b610f3f565b6033546001600160a01b03166103a3565b6103186104d2366004612cd9565b60a86020526000908152604090205481565b609e546103a3906001600160a01b031681565b610318610f7c565b61031860ab5481565b61033b61128c565b61033b61051e366004612cd9565b611307565b610318611325565b609d546103a3906001600160a01b031681565b60aa546103809060ff1681565b61033b610559366004612cd9565b611342565b6098546103a3906001600160a01b031681565b61033b611516565b61033b610587366004612d39565b6115ba565b60a1546103a3906001600160a01b031681565b61033b6105ad366004612cd9565b6117fd565b61031860995481565b6105c3611b2a565b6040516103229190612e60565b61033b6105de366004612cbc565b611bb8565b610318609a5481565b61031860a55481565b61033b611c45565b60a254600090600160a81b900460ff1615610619575060a35490565b60a1546001600160a01b03166106305750609b5490565b60008061063b611d24565b90925090506000811561066a5761066782610661609b548661202b90919063ffffffff16565b90612040565b90505b61067261204c565b909350915081156106a857600061069883610661609b548761202b90919063ffffffff16565b9050818111156106a6578091505b505b609b548110156106b75750609b545b609c548111156106c65750609c545b9392505050565b6033546001600160a01b03163314806106f05750609e546001600160a01b031633145b6107415760405162461bcd60e51b815260206004820152600b60248201527f41757468206661696c656400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60aa805460ff19166001179055565b6107586121ea565b60a25460ff600160a81b9091041615158215146107b75760405162461bcd60e51b815260206004820152600b60248201527f416c7265616479207365740000000000000000000000000000000000000000006044820152606401610738565b60a280547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b841515908102919091179091556001036107fc5760a38190555b604080518315158152602081018390527f575fcb4f41780c0536203c1ad9067aa9b04352d2ff1e5e1ee818a5aa9dade1ce91015b60405180910390a15050565b6108446121ea565b6001600160a01b03811661085757600080fd5b6001600160a01b038116600090815260a9602052604090205460ff16151560011461088157600080fd5b6001600160a01b038116600081815260a96020526040808220805460ff19169055517fa7a775c2c8141f7985c111748ec31c11e5e44b83528e105c8d1d4e8e6b81cf809190a250565b6108d26121ea565b6001600160a01b0381166109115760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b6044820152606401610738565b60a1805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f8229372d912c6ec024c1ece7fb23066cc7f8d4e4ea4e1d5c6a2f5dd4f5bc97c6906020015b60405180910390a150565b33600090815260a9602052604081205460ff161515600114806109a057506033546001600160a01b031633145b6109ec5760405162461bcd60e51b815260206004820152600a60248201527f6e6f74206b6565706572000000000000000000000000000000000000000000006044820152606401610738565b609d54604080517f66c91c4300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916366c91c439160048083019260209291908290030181865afa158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a739190612e93565b6001600160a01b031663a591a6f46040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190612eb0565b90508015610c7457610ae781612244565b609f54609d546040516340c10f1960e01b81526001600160a01b039182166004820152602481018490529116906340c10f1990604401600060405180830381600087803b158015610b3757600080fd5b505af1158015610b4b573d6000803e3d6000fd5b5050609d546040517f76ae6030000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0390911692506376ae60309150602401600060405180830381600087803b158015610bae57600080fd5b505af1158015610bc2573d6000803e3d6000fd5b50505050609f60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3d9190612eb0565b60a7556040518181527fb2551dbcbbc5e10b061417241206244b6b437957d6dd69d9e46aed114047b0959060200160405180910390a15b905090565b610c816121ea565b6001600160a01b038116610c9457600080fd5b6001600160a01b038116600090815260a9602052604090205460ff1615610cba57600080fd5b6001600160a01b038116600081815260a96020526040808220805460ff19166001179055517f1584773458d98c71b34a270ee1100b3a42889bf91e3b7a858563b684c24d838e9190a250565b610d0e6121ea565b6001600160a01b038116610d4d5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b6044820152606401610738565b6098805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fc6cb03f4249a54f07e64b24cac915b50cddcba8604ab7f158325661fe2d57e4690602001610968565b610db06121ea565b6001600160a01b038116610def5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b6044820152606401610738565b60a0805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fc6cb03f4249a54f07e64b24cac915b50cddcba8604ab7f158325661fe2d57e4690602001610968565b610e526121ea565b610e5c60006123bc565b565b610e666121ea565b60a254600160a01b900460ff1615610ee65760405162461bcd60e51b815260206004820152602260248201527f5665506561726c204465706f69737420697320616c726561647920656e61626c60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610738565b60a280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790556040517f0ec124fd9588c6e50e2550ac6d2659419c953c731ea3ae8328b4e2f5e20619d190600090a1565b610f476121ea565b60a68190556040518181527fa5cb0fda77df2583a75497c8198d3c202b8f59de6b409606b22bc98e24a87fbc90602001610968565b33600090815260a9602052604081205460ff16151560011480610fa957506033546001600160a01b031633145b610ff55760405162461bcd60e51b815260206004820152600a60248201527f6e6f74206b6565706572000000000000000000000000000000000000000000006044820152606401610738565b60ab54609e54604080517fb4cd143a00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163b4cd143a9160048082019260009290919082900301818387803b15801561105757600080fd5b505af115801561106b573d6000803e3d6000fd5b50505050609e60009054906101000a90046001600160a01b03166001600160a01b031663eca5f1586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e69190612eb0565b60ab8190556000906110f8908361241b565b609f54609d546040516340c10f1960e01b81526001600160a01b0391821660048201526024810184905292935016906340c10f1990604401600060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b5050609d546040517f0fa94442000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b039091169250630fa944429150602401600060405180830381600087803b1580156111c157600080fd5b505af11580156111d5573d6000803e3d6000fd5b50505050609f60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561122c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112509190612eb0565b60a7556040518181527fafae32ce2847c13a56ab802c034c27d3c19f1d61be48c424c5df134145cd44d09060200160405180910390a191505090565b6033546001600160a01b03163314806112af5750609e546001600160a01b031633145b6112fb5760405162461bcd60e51b815260206004820152600b60248201527f41757468206661696c65640000000000000000000000000000000000000000006044820152606401610738565b60aa805460ff19169055565b61130f612427565b61131881612480565b6113226001606555565b50565b6000609a5460a654426113389190612edf565b610c749190612ef2565b61134a612427565b60aa5460ff1661139c5760405162461bcd60e51b815260206004820152600f60248201527f52656465656d2064697361626c656400000000000000000000000000000000006044820152606401610738565b60006113be60a45461066160a55460a4546113b79190612edf565b859061202b565b609e546040517f66123fe5000000000000000000000000000000000000000000000000000000008152600481018390523360248201529192506001600160a01b0316906366123fe590604401600060405180830381600087803b15801561142457600080fd5b505af1158015611438573d6000803e3d6000fd5b505050508060ab600082825461144e9190612edf565b9091555050609f546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156114b857600080fd5b505af11580156114cc573d6000803e3d6000fd5b505060408051858152602081018590523393507fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92992500160405180910390a2506113226001606555565b61151e612427565b6098546040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a49190612eb0565b90506115af81612480565b50610e5c6001606555565b600054610100900460ff16158080156115da5750600054600160ff909116105b806115f45750303b1580156115f4575060005460ff166001145b6116665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610738565b6000805460ff191660011790558015611689576000805461ff0019166101001790555b611691612594565b611699612607565b60976116a58a82612f9c565b50609d805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0386811691909117909255609e805482168b8416179055609f805482168a841617905560a08054821688841617905560a180549091169186169190911790556117158261016c61305c565b611722906201518061305c565b60995562093a80609a55609880546001600160a01b03881673ffffffffffffffffffffffffffffffffffffffff1990911617905560a280547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b179055607d609b556102bc609c556103e860a455602360a55560aa805460ff19166001179055600060ab5580156117f2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b611805612427565b60a254600160a01b900460ff1661185e5760405162461bcd60e51b815260206004820152601a60248201527f4e4654204465706f736974206973206e6f7420656e61626c65640000000000006044820152606401610738565b60a254600090600160a81b900460ff161561187c575060a354611887565b6118846105fd565b90505b60a0546040517fb45a3c0e000000000000000000000000000000000000000000000000000000008152600481018490526000916001600160a01b03169063b45a3c0e906024016040805180830381865afa1580156118e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190d9190613073565b509050600061191b8261267a565b9050600061193660a4546106618660a4546113b79190612edf565b60a054609e546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0391821660248201526044810189905292935016906323b872dd90606401600060405180830381600087803b1580156119a757600080fd5b505af11580156119bb573d6000803e3d6000fd5b5050609e546040517f24a47aeb000000000000000000000000000000000000000000000000000000008152600481018990526001600160a01b0390911692506324a47aeb9150602401600060405180830381600087803b158015611a1e57600080fd5b505af1158015611a32573d6000803e3d6000fd5b505050508160ab6000828254611a4891906130a7565b9091555081905060a86000611a5b611325565b81526020019081526020016000206000828254611a7891906130a7565b9091555050609f546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015611ac957600080fd5b505af1158015611add573d6000803e3d6000fd5b505060408051888152602081018590523393507f2c6e00d05c9537687e3346c6bb423b06c873979206b8d425ddbb4f9b436e058292500160405180910390a2505050506113226001606555565b60978054611b3790612f14565b80601f0160208091040260200160405190810160405280929190818152602001828054611b6390612f14565b8015611bb05780601f10611b8557610100808354040283529160200191611bb0565b820191906000526020600020905b815481529060010190602001808311611b9357829003601f168201915b505050505081565b611bc06121ea565b6001600160a01b038116611c3c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610738565b611322816123bc565b611c4d6121ea565b60a254600160a01b900460ff161515600114611cd15760405162461bcd60e51b815260206004820152602360248201527f5665506561726c204465706f69737420697320616c726561647920646973616260448201527f6c656400000000000000000000000000000000000000000000000000000000006064820152608401610738565b60a280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040517fade2d598b8835dbb08a4168080043317e655d128eab9a2e7b7d8a21924665c8c90600090a1565b600080600060a160009054906101000a90046001600160a01b03166001600160a01b0316638a7b8cf26040518163ffffffff1660e01b8152600401606060405180830381865afa158015611d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da091906130ba565b905060008060a160009054906101000a90046001600160a01b03166001600160a01b0316631df8c7176040518163ffffffff1660e01b8152600401606060405180830381865afa158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c9190613116565b50845191935091504203611f335760a154604080517febeb31db00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ebeb31db9160048083019260209291908290030181865afa158015611e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb19190612eb0565b60a1549091506001600160a01b031663252c09d7611ed0600284612edf565b6040518263ffffffff1660e01b8152600401611eee91815260200190565b606060405180830381865afa158015611f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2f91906130ba565b9350505b8251600090611f429042612edf565b9050600081856020015185611f579190612edf565b611f619190612ef2565b9050600082866040015185611f769190612edf565b611f809190612ef2565b905060a160009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff99190612e93565b609f546001600160a01b0391821691160361201a5790965094508585612021565b9650945084865b5050505050509091565b6000612037828461305c565b90505b92915050565b60006120378284612ef2565b600080600060a160009054906101000a90046001600160a01b03166001600160a01b031663443cb4bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c89190612eb0565b9050600060a160009054906101000a90046001600160a01b03166001600160a01b0316635a76f25e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561211f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121439190612eb0565b905060a160009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bc9190612e93565b609f546001600160a01b039182169116036121dd57909250905081816121e4565b9250905080825b50509091565b6033546001600160a01b03163314610e5c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610738565b609e54609854612261916001600160a01b039182169116836126a1565b609e54604080517feca5f15800000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163eca5f1589160048083019260209291908290030181865afa1580156122c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e89190612eb0565b9050801561238457609e546040517f15456eba000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03909116906315456eba90602401600060405180830381600087803b15801561234f57600080fd5b505af1158015612363573d6000803e3d6000fd5b505050508160ab600082825461237991906130a7565b9091555061238c9050565b61238c61274f565b6040518281527fb1bcb34d261331804be4d3be145a234b1672463e7ac788c3d401059fcfb0510890602001610830565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006120378284612edf565b6002606554036124795760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610738565b6002606555565b806000036124d05760405162461bcd60e51b815260206004820152600360248201527f213e3000000000000000000000000000000000000000000000000000000000006044820152606401610738565b6098546124e8906001600160a01b0316333084612898565b6124f181612244565b609f546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561253d57600080fd5b505af1158015612551573d6000803e3d6000fd5b50506040518381523392507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c915060200160405180910390a250565b6001606555565b600054610100900460ff166125ff5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b610e5c6128ef565b600054610100900460ff166126725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b610e5c612963565b6000600f82900b8181121561203a576f7fffffffffffffffffffffffffffffff1692915050565b6040516001600160a01b03831660248201526044810182905261274a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526129ce565b505050565b609854609e546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa1580156127b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127dd9190612eb0565b609e546099546040517fb52c05fe0000000000000000000000000000000000000000000000000000000081526004810184905260248101919091529192506001600160a01b03169063b52c05fe90604401600060405180830381600087803b15801561284857600080fd5b505af115801561285c573d6000803e3d6000fd5b50505060ab829055506099546040519081527f23e239e8dfd669d9b934a258bd513c902ad65f61898e62a73efca959ba8a330490602001610968565b6040516001600160a01b03808516602483015283166044820152606481018290526128e99085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016126e6565b50505050565b600054610100900460ff1661295a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b610e5c336123bc565b600054610100900460ff1661258d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b6000612a23826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ab69092919063ffffffff16565b9050805160001480612a44575080806020019051810190612a449190613144565b61274a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610738565b6060612ac58484600085612acd565b949350505050565b606082471015612b455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610738565b600080866001600160a01b03168587604051612b619190613161565b60006040518083038185875af1925050503d8060008114612b9e576040519150601f19603f3d011682016040523d82523d6000602084013e612ba3565b606091505b5091509150612bb487838387612bbf565b979650505050505050565b60608315612c2e578251600003612c27576001600160a01b0385163b612c275760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610738565b5081612ac5565b612ac58383815115612c435781518083602001fd5b8060405162461bcd60e51b81526004016107389190612e60565b801515811461132257600080fd5b60008060408385031215612c7e57600080fd5b8235612c8981612c5d565b946020939093013593505050565b6001600160a01b038116811461132257600080fd5b8035612cb781612c97565b919050565b600060208284031215612cce57600080fd5b81356106c681612c97565b600060208284031215612ceb57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d3157612d31612cf2565b604052919050565b600080600080600080600080610100898b031215612d5657600080fd5b883567ffffffffffffffff80821115612d6e57600080fd5b818b0191508b601f830112612d8257600080fd5b8135602082821115612d9657612d96612cf2565b612da881601f19601f85011601612d08565b92508183528d81838601011115612dbe57600080fd5b81818501828501376000818385010152829b50612ddc818e01612cac565b9a5050505050612dee60408a01612cac565b9550612dfc60608a01612cac565b9450612e0a60808a01612cac565b9350612e1860a08a01612cac565b9250612e2660c08a01612cac565b915060e089013590509295985092959890939650565b60005b83811015612e57578181015183820152602001612e3f565b50506000910152565b6020815260008251806020840152612e7f816040850160208701612e3c565b601f01601f19169190910160400192915050565b600060208284031215612ea557600080fd5b81516106c681612c97565b600060208284031215612ec257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561203a5761203a612ec9565b600082612f0f57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680612f2857607f821691505b602082108103612f4857634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561274a57600081815260208120601f850160051c81016020861015612f755750805b601f850160051c820191505b81811015612f9457828155600101612f81565b505050505050565b815167ffffffffffffffff811115612fb657612fb6612cf2565b612fca81612fc48454612f14565b84612f4e565b602080601f831160018114612fff5760008415612fe75750858301515b600019600386901b1c1916600185901b178555612f94565b600085815260208120601f198616915b8281101561302e5788860151825594840194600190910190840161300f565b508582101561304c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141761203a5761203a612ec9565b6000806040838503121561308657600080fd5b825180600f0b811461309757600080fd5b6020939093015192949293505050565b8082018082111561203a5761203a612ec9565b6000606082840312156130cc57600080fd5b6040516060810181811067ffffffffffffffff821117156130ef576130ef612cf2565b80604052508251815260208301516020820152604083015160408201528091505092915050565b60008060006060848603121561312b57600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561315657600080fd5b81516106c681612c5d565b60008251613173818460208701612e3c565b919091019291505056fea26469706673582212206a68f885a1956fbe1a319e7e3d7a54522bc921c57b1d54361a9211064db7ff9c64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030a5760003560e01c806389991eff1161019c578063db006a75116100ee578063ee00ef3a11610097578063f4359ce511610071578063f4359ce5146105e3578063f46c37e8146105ec578063ff781641146105f557600080fd5b8063ee00ef3a146105b2578063f1819bb5146105bb578063f2fde38b146105d057600080fd5b8063df381efd116100c8578063df381efd14610579578063e841b6261461058c578063e91a7ca61461059f57600080fd5b8063db006a751461054b578063dc19c4d81461055e578063de5f62681461057157600080fd5b8063b20150df11610150578063b97dd9e21161012a578063b97dd9e214610523578063d0fb02031461052b578063d2f825361461053e57600080fd5b8063b20150df146104ff578063b59ca79914610508578063b6b55f251461051057600080fd5b806399a10fa21161018157806399a10fa2146104c4578063a8c62e76146104e4578063af14052c146104f757600080fd5b806389991eff146104a05780638da5cb5b146104b357600080fd5b80633cad2a0a1161026057806369af495b11610209578063715018a6116101e3578063715018a61461047c57806380ef238d14610484578063819674e31461048c57600080fd5b806369af495b146104335780636ba42aaa146104465780637001cbe11461046957600080fd5b8063569482d71161023a578063569482d71461040457806367244d3714610417578063672a0fb81461042a57600080fd5b80633cad2a0a146103e05780634032b72b146103e857806352f0699c146103fb57600080fd5b806314ae9f2e116102c2578063268155bd1161029c578063268155bd146103bb578063345b5980146103ce5780633845fbf3146103d757600080fd5b806314ae9f2e146103595780631eab5bec1461036c578063217c1d681461039057600080fd5b8063061873e8116102f3578063061873e814610333578063081744511461033d578063138731011461034657600080fd5b8063059f8b161461030f57806305c09c8c1461032b575b600080fd5b61031860a45481565b6040519081526020015b60405180910390f35b6103186105fd565b61033b6106cd565b005b610318609c5481565b61033b610354366004612c6b565b610750565b61033b610367366004612cbc565b61083c565b60a25461038090600160a01b900460ff1681565b6040519015158152602001610322565b609f546103a3906001600160a01b031681565b6040516001600160a01b039091168152602001610322565b61033b6103c9366004612cbc565b6108ca565b610318609b5481565b61031860a75481565b610318610973565b61033b6103f6366004612cbc565b610c79565b61031860a35481565b60a2546103a3906001600160a01b031681565b60a0546103a3906001600160a01b031681565b61031860a65481565b61033b610441366004612cbc565b610d06565b610380610454366004612cbc565b60a96020526000908152604090205460ff1681565b61033b610477366004612cbc565b610da8565b61033b610e4a565b61033b610e5e565b60a25461038090600160a81b900460ff1681565b61033b6104ae366004612cd9565b610f3f565b6033546001600160a01b03166103a3565b6103186104d2366004612cd9565b60a86020526000908152604090205481565b609e546103a3906001600160a01b031681565b610318610f7c565b61031860ab5481565b61033b61128c565b61033b61051e366004612cd9565b611307565b610318611325565b609d546103a3906001600160a01b031681565b60aa546103809060ff1681565b61033b610559366004612cd9565b611342565b6098546103a3906001600160a01b031681565b61033b611516565b61033b610587366004612d39565b6115ba565b60a1546103a3906001600160a01b031681565b61033b6105ad366004612cd9565b6117fd565b61031860995481565b6105c3611b2a565b6040516103229190612e60565b61033b6105de366004612cbc565b611bb8565b610318609a5481565b61031860a55481565b61033b611c45565b60a254600090600160a81b900460ff1615610619575060a35490565b60a1546001600160a01b03166106305750609b5490565b60008061063b611d24565b90925090506000811561066a5761066782610661609b548661202b90919063ffffffff16565b90612040565b90505b61067261204c565b909350915081156106a857600061069883610661609b548761202b90919063ffffffff16565b9050818111156106a6578091505b505b609b548110156106b75750609b545b609c548111156106c65750609c545b9392505050565b6033546001600160a01b03163314806106f05750609e546001600160a01b031633145b6107415760405162461bcd60e51b815260206004820152600b60248201527f41757468206661696c656400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b60aa805460ff19166001179055565b6107586121ea565b60a25460ff600160a81b9091041615158215146107b75760405162461bcd60e51b815260206004820152600b60248201527f416c7265616479207365740000000000000000000000000000000000000000006044820152606401610738565b60a280547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16600160a81b841515908102919091179091556001036107fc5760a38190555b604080518315158152602081018390527f575fcb4f41780c0536203c1ad9067aa9b04352d2ff1e5e1ee818a5aa9dade1ce91015b60405180910390a15050565b6108446121ea565b6001600160a01b03811661085757600080fd5b6001600160a01b038116600090815260a9602052604090205460ff16151560011461088157600080fd5b6001600160a01b038116600081815260a96020526040808220805460ff19169055517fa7a775c2c8141f7985c111748ec31c11e5e44b83528e105c8d1d4e8e6b81cf809190a250565b6108d26121ea565b6001600160a01b0381166109115760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b6044820152606401610738565b60a1805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f8229372d912c6ec024c1ece7fb23066cc7f8d4e4ea4e1d5c6a2f5dd4f5bc97c6906020015b60405180910390a150565b33600090815260a9602052604081205460ff161515600114806109a057506033546001600160a01b031633145b6109ec5760405162461bcd60e51b815260206004820152600a60248201527f6e6f74206b6565706572000000000000000000000000000000000000000000006044820152606401610738565b609d54604080517f66c91c4300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916366c91c439160048083019260209291908290030181865afa158015610a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a739190612e93565b6001600160a01b031663a591a6f46040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190612eb0565b90508015610c7457610ae781612244565b609f54609d546040516340c10f1960e01b81526001600160a01b039182166004820152602481018490529116906340c10f1990604401600060405180830381600087803b158015610b3757600080fd5b505af1158015610b4b573d6000803e3d6000fd5b5050609d546040517f76ae6030000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b0390911692506376ae60309150602401600060405180830381600087803b158015610bae57600080fd5b505af1158015610bc2573d6000803e3d6000fd5b50505050609f60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3d9190612eb0565b60a7556040518181527fb2551dbcbbc5e10b061417241206244b6b437957d6dd69d9e46aed114047b0959060200160405180910390a15b905090565b610c816121ea565b6001600160a01b038116610c9457600080fd5b6001600160a01b038116600090815260a9602052604090205460ff1615610cba57600080fd5b6001600160a01b038116600081815260a96020526040808220805460ff19166001179055517f1584773458d98c71b34a270ee1100b3a42889bf91e3b7a858563b684c24d838e9190a250565b610d0e6121ea565b6001600160a01b038116610d4d5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b6044820152606401610738565b6098805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fc6cb03f4249a54f07e64b24cac915b50cddcba8604ab7f158325661fe2d57e4690602001610968565b610db06121ea565b6001600160a01b038116610def5760405162461bcd60e51b815260206004820152600660248201526506164647220360d41b6044820152606401610738565b60a0805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fc6cb03f4249a54f07e64b24cac915b50cddcba8604ab7f158325661fe2d57e4690602001610968565b610e526121ea565b610e5c60006123bc565b565b610e666121ea565b60a254600160a01b900460ff1615610ee65760405162461bcd60e51b815260206004820152602260248201527f5665506561726c204465706f69737420697320616c726561647920656e61626c60448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610738565b60a280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790556040517f0ec124fd9588c6e50e2550ac6d2659419c953c731ea3ae8328b4e2f5e20619d190600090a1565b610f476121ea565b60a68190556040518181527fa5cb0fda77df2583a75497c8198d3c202b8f59de6b409606b22bc98e24a87fbc90602001610968565b33600090815260a9602052604081205460ff16151560011480610fa957506033546001600160a01b031633145b610ff55760405162461bcd60e51b815260206004820152600a60248201527f6e6f74206b6565706572000000000000000000000000000000000000000000006044820152606401610738565b60ab54609e54604080517fb4cd143a00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163b4cd143a9160048082019260009290919082900301818387803b15801561105757600080fd5b505af115801561106b573d6000803e3d6000fd5b50505050609e60009054906101000a90046001600160a01b03166001600160a01b031663eca5f1586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e69190612eb0565b60ab8190556000906110f8908361241b565b609f54609d546040516340c10f1960e01b81526001600160a01b0391821660048201526024810184905292935016906340c10f1990604401600060405180830381600087803b15801561114a57600080fd5b505af115801561115e573d6000803e3d6000fd5b5050609d546040517f0fa94442000000000000000000000000000000000000000000000000000000008152600481018590526001600160a01b039091169250630fa944429150602401600060405180830381600087803b1580156111c157600080fd5b505af11580156111d5573d6000803e3d6000fd5b50505050609f60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561122c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112509190612eb0565b60a7556040518181527fafae32ce2847c13a56ab802c034c27d3c19f1d61be48c424c5df134145cd44d09060200160405180910390a191505090565b6033546001600160a01b03163314806112af5750609e546001600160a01b031633145b6112fb5760405162461bcd60e51b815260206004820152600b60248201527f41757468206661696c65640000000000000000000000000000000000000000006044820152606401610738565b60aa805460ff19169055565b61130f612427565b61131881612480565b6113226001606555565b50565b6000609a5460a654426113389190612edf565b610c749190612ef2565b61134a612427565b60aa5460ff1661139c5760405162461bcd60e51b815260206004820152600f60248201527f52656465656d2064697361626c656400000000000000000000000000000000006044820152606401610738565b60006113be60a45461066160a55460a4546113b79190612edf565b859061202b565b609e546040517f66123fe5000000000000000000000000000000000000000000000000000000008152600481018390523360248201529192506001600160a01b0316906366123fe590604401600060405180830381600087803b15801561142457600080fd5b505af1158015611438573d6000803e3d6000fd5b505050508060ab600082825461144e9190612edf565b9091555050609f546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156114b857600080fd5b505af11580156114cc573d6000803e3d6000fd5b505060408051858152602081018590523393507fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92992500160405180910390a2506113226001606555565b61151e612427565b6098546040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a49190612eb0565b90506115af81612480565b50610e5c6001606555565b600054610100900460ff16158080156115da5750600054600160ff909116105b806115f45750303b1580156115f4575060005460ff166001145b6116665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610738565b6000805460ff191660011790558015611689576000805461ff0019166101001790555b611691612594565b611699612607565b60976116a58a82612f9c565b50609d805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0386811691909117909255609e805482168b8416179055609f805482168a841617905560a08054821688841617905560a180549091169186169190911790556117158261016c61305c565b611722906201518061305c565b60995562093a80609a55609880546001600160a01b03881673ffffffffffffffffffffffffffffffffffffffff1990911617905560a280547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff16600160a01b179055607d609b556102bc609c556103e860a455602360a55560aa805460ff19166001179055600060ab5580156117f2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b611805612427565b60a254600160a01b900460ff1661185e5760405162461bcd60e51b815260206004820152601a60248201527f4e4654204465706f736974206973206e6f7420656e61626c65640000000000006044820152606401610738565b60a254600090600160a81b900460ff161561187c575060a354611887565b6118846105fd565b90505b60a0546040517fb45a3c0e000000000000000000000000000000000000000000000000000000008152600481018490526000916001600160a01b03169063b45a3c0e906024016040805180830381865afa1580156118e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190d9190613073565b509050600061191b8261267a565b9050600061193660a4546106618660a4546113b79190612edf565b60a054609e546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0391821660248201526044810189905292935016906323b872dd90606401600060405180830381600087803b1580156119a757600080fd5b505af11580156119bb573d6000803e3d6000fd5b5050609e546040517f24a47aeb000000000000000000000000000000000000000000000000000000008152600481018990526001600160a01b0390911692506324a47aeb9150602401600060405180830381600087803b158015611a1e57600080fd5b505af1158015611a32573d6000803e3d6000fd5b505050508160ab6000828254611a4891906130a7565b9091555081905060a86000611a5b611325565b81526020019081526020016000206000828254611a7891906130a7565b9091555050609f546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b158015611ac957600080fd5b505af1158015611add573d6000803e3d6000fd5b505060408051888152602081018590523393507f2c6e00d05c9537687e3346c6bb423b06c873979206b8d425ddbb4f9b436e058292500160405180910390a2505050506113226001606555565b60978054611b3790612f14565b80601f0160208091040260200160405190810160405280929190818152602001828054611b6390612f14565b8015611bb05780601f10611b8557610100808354040283529160200191611bb0565b820191906000526020600020905b815481529060010190602001808311611b9357829003601f168201915b505050505081565b611bc06121ea565b6001600160a01b038116611c3c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610738565b611322816123bc565b611c4d6121ea565b60a254600160a01b900460ff161515600114611cd15760405162461bcd60e51b815260206004820152602360248201527f5665506561726c204465706f69737420697320616c726561647920646973616260448201527f6c656400000000000000000000000000000000000000000000000000000000006064820152608401610738565b60a280547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040517fade2d598b8835dbb08a4168080043317e655d128eab9a2e7b7d8a21924665c8c90600090a1565b600080600060a160009054906101000a90046001600160a01b03166001600160a01b0316638a7b8cf26040518163ffffffff1660e01b8152600401606060405180830381865afa158015611d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da091906130ba565b905060008060a160009054906101000a90046001600160a01b03166001600160a01b0316631df8c7176040518163ffffffff1660e01b8152600401606060405180830381865afa158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c9190613116565b50845191935091504203611f335760a154604080517febeb31db00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163ebeb31db9160048083019260209291908290030181865afa158015611e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb19190612eb0565b60a1549091506001600160a01b031663252c09d7611ed0600284612edf565b6040518263ffffffff1660e01b8152600401611eee91815260200190565b606060405180830381865afa158015611f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2f91906130ba565b9350505b8251600090611f429042612edf565b9050600081856020015185611f579190612edf565b611f619190612ef2565b9050600082866040015185611f769190612edf565b611f809190612ef2565b905060a160009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff99190612e93565b609f546001600160a01b0391821691160361201a5790965094508585612021565b9650945084865b5050505050509091565b6000612037828461305c565b90505b92915050565b60006120378284612ef2565b600080600060a160009054906101000a90046001600160a01b03166001600160a01b031663443cb4bc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120c89190612eb0565b9050600060a160009054906101000a90046001600160a01b03166001600160a01b0316635a76f25e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561211f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121439190612eb0565b905060a160009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bc9190612e93565b609f546001600160a01b039182169116036121dd57909250905081816121e4565b9250905080825b50509091565b6033546001600160a01b03163314610e5c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610738565b609e54609854612261916001600160a01b039182169116836126a1565b609e54604080517feca5f15800000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163eca5f1589160048083019260209291908290030181865afa1580156122c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e89190612eb0565b9050801561238457609e546040517f15456eba000000000000000000000000000000000000000000000000000000008152600481018490526001600160a01b03909116906315456eba90602401600060405180830381600087803b15801561234f57600080fd5b505af1158015612363573d6000803e3d6000fd5b505050508160ab600082825461237991906130a7565b9091555061238c9050565b61238c61274f565b6040518281527fb1bcb34d261331804be4d3be145a234b1672463e7ac788c3d401059fcfb0510890602001610830565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006120378284612edf565b6002606554036124795760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610738565b6002606555565b806000036124d05760405162461bcd60e51b815260206004820152600360248201527f213e3000000000000000000000000000000000000000000000000000000000006044820152606401610738565b6098546124e8906001600160a01b0316333084612898565b6124f181612244565b609f546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b15801561253d57600080fd5b505af1158015612551573d6000803e3d6000fd5b50506040518381523392507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c915060200160405180910390a250565b6001606555565b600054610100900460ff166125ff5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b610e5c6128ef565b600054610100900460ff166126725760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b610e5c612963565b6000600f82900b8181121561203a576f7fffffffffffffffffffffffffffffff1692915050565b6040516001600160a01b03831660248201526044810182905261274a9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526129ce565b505050565b609854609e546040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa1580156127b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127dd9190612eb0565b609e546099546040517fb52c05fe0000000000000000000000000000000000000000000000000000000081526004810184905260248101919091529192506001600160a01b03169063b52c05fe90604401600060405180830381600087803b15801561284857600080fd5b505af115801561285c573d6000803e3d6000fd5b50505060ab829055506099546040519081527f23e239e8dfd669d9b934a258bd513c902ad65f61898e62a73efca959ba8a330490602001610968565b6040516001600160a01b03808516602483015283166044820152606481018290526128e99085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016126e6565b50505050565b600054610100900460ff1661295a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b610e5c336123bc565b600054610100900460ff1661258d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610738565b6000612a23826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ab69092919063ffffffff16565b9050805160001480612a44575080806020019051810190612a449190613144565b61274a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610738565b6060612ac58484600085612acd565b949350505050565b606082471015612b455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610738565b600080866001600160a01b03168587604051612b619190613161565b60006040518083038185875af1925050503d8060008114612b9e576040519150601f19603f3d011682016040523d82523d6000602084013e612ba3565b606091505b5091509150612bb487838387612bbf565b979650505050505050565b60608315612c2e578251600003612c27576001600160a01b0385163b612c275760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610738565b5081612ac5565b612ac58383815115612c435781518083602001fd5b8060405162461bcd60e51b81526004016107389190612e60565b801515811461132257600080fd5b60008060408385031215612c7e57600080fd5b8235612c8981612c5d565b946020939093013593505050565b6001600160a01b038116811461132257600080fd5b8035612cb781612c97565b919050565b600060208284031215612cce57600080fd5b81356106c681612c97565b600060208284031215612ceb57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612d3157612d31612cf2565b604052919050565b600080600080600080600080610100898b031215612d5657600080fd5b883567ffffffffffffffff80821115612d6e57600080fd5b818b0191508b601f830112612d8257600080fd5b8135602082821115612d9657612d96612cf2565b612da881601f19601f85011601612d08565b92508183528d81838601011115612dbe57600080fd5b81818501828501376000818385010152829b50612ddc818e01612cac565b9a5050505050612dee60408a01612cac565b9550612dfc60608a01612cac565b9450612e0a60808a01612cac565b9350612e1860a08a01612cac565b9250612e2660c08a01612cac565b915060e089013590509295985092959890939650565b60005b83811015612e57578181015183820152602001612e3f565b50506000910152565b6020815260008251806020840152612e7f816040850160208701612e3c565b601f01601f19169190910160400192915050565b600060208284031215612ea557600080fd5b81516106c681612c97565b600060208284031215612ec257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561203a5761203a612ec9565b600082612f0f57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c90821680612f2857607f821691505b602082108103612f4857634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561274a57600081815260208120601f850160051c81016020861015612f755750805b601f850160051c820191505b81811015612f9457828155600101612f81565b505050505050565b815167ffffffffffffffff811115612fb657612fb6612cf2565b612fca81612fc48454612f14565b84612f4e565b602080601f831160018114612fff5760008415612fe75750858301515b600019600386901b1c1916600185901b178555612f94565b600085815260208120601f198616915b8281101561302e5788860151825594840194600190910190840161300f565b508582101561304c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141761203a5761203a612ec9565b6000806040838503121561308657600080fd5b825180600f0b811461309757600080fd5b6020939093015192949293505050565b8082018082111561203a5761203a612ec9565b6000606082840312156130cc57600080fd5b6040516060810181811067ffffffffffffffff821117156130ef576130ef612cf2565b80604052508251815260208301516020820152604083015160408201528091505092915050565b60008060006060848603121561312b57600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561315657600080fd5b81516106c681612c5d565b60008251613173818460208701612e3c565b919091019291505056fea26469706673582212206a68f885a1956fbe1a319e7e3d7a54522bc921c57b1d54361a9211064db7ff9c64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1882,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 314,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 383,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10483,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "__NAME__",
        "offset": 0,
        "slot": "151",
        "type": "t_string_storage"
      },
      {
        "astId": 10485,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "pearl",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 10487,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "MAXTIME",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 10489,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "WEEK",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 10491,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "MIN_VE_DEPOSIT_FEE",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 10493,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "MAX_VE_DEPOSIT_FEE",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 10495,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "feeManager",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 10497,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "strategy",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 10499,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "caviar",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      },
      {
        "astId": 10501,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "vePearl",
        "offset": 0,
        "slot": "160",
        "type": "t_address"
      },
      {
        "astId": 10503,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "pearlPair",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 10505,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "smartWalletWhitelist",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 10507,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "veDepositEnabled",
        "offset": 20,
        "slot": "162",
        "type": "t_bool"
      },
      {
        "astId": 10509,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "isPromotionPeriod",
        "offset": 21,
        "slot": "162",
        "type": "t_bool"
      },
      {
        "astId": 10511,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "PROMO_VE_DEPOSIT_FEE",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 10513,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "MULTIPLIER",
        "offset": 0,
        "slot": "164",
        "type": "t_uint256"
      },
      {
        "astId": 10515,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "REDEEM_FEE",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 10517,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "beginTimestamp",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 10519,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "caviarSupplyAtCurrentEpoch",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      },
      {
        "astId": 10523,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "mintedFromNftAt",
        "offset": 0,
        "slot": "168",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10527,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "isKeeper",
        "offset": 0,
        "slot": "169",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10529,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "redeemEnabled",
        "offset": 0,
        "slot": "170",
        "type": "t_bool"
      },
      {
        "astId": 10531,
        "contract": "contracts/CaviarManager.sol:CaviarManager",
        "label": "vePearlLastBalance",
        "offset": 0,
        "slot": "171",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}